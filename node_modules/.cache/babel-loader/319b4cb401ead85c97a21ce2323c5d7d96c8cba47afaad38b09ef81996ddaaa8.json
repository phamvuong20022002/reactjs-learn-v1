{"ast":null,"code":"'use strict';\n\nconst MiniPass = require('minipass');\nconst Pax = require('./pax.js');\nconst Header = require('./header.js');\nconst fs = require('fs');\nconst path = require('path');\nconst normPath = require('./normalize-windows-path.js');\nconst stripSlash = require('./strip-trailing-slashes.js');\nconst prefixPath = (path, prefix) => {\n  if (!prefix) return normPath(path);\n  path = normPath(path).replace(/^\\.(\\/|$)/, '');\n  return stripSlash(prefix) + '/' + path;\n};\nconst maxReadSize = 16 * 1024 * 1024;\nconst PROCESS = Symbol('process');\nconst FILE = Symbol('file');\nconst DIRECTORY = Symbol('directory');\nconst SYMLINK = Symbol('symlink');\nconst HARDLINK = Symbol('hardlink');\nconst HEADER = Symbol('header');\nconst READ = Symbol('read');\nconst LSTAT = Symbol('lstat');\nconst ONLSTAT = Symbol('onlstat');\nconst ONREAD = Symbol('onread');\nconst ONREADLINK = Symbol('onreadlink');\nconst OPENFILE = Symbol('openfile');\nconst ONOPENFILE = Symbol('onopenfile');\nconst CLOSE = Symbol('close');\nconst MODE = Symbol('mode');\nconst AWAITDRAIN = Symbol('awaitDrain');\nconst ONDRAIN = Symbol('ondrain');\nconst PREFIX = Symbol('prefix');\nconst HAD_ERROR = Symbol('hadError');\nconst warner = require('./warn-mixin.js');\nconst winchars = require('./winchars.js');\nconst stripAbsolutePath = require('./strip-absolute-path.js');\nconst modeFix = require('./mode-fix.js');\nconst WriteEntry = warner(class WriteEntry extends MiniPass {\n  constructor(p, opt) {\n    opt = opt || {};\n    super(opt);\n    if (typeof p !== 'string') throw new TypeError('path is required');\n    this.path = normPath(p);\n    // suppress atime, ctime, uid, gid, uname, gname\n    this.portable = !!opt.portable;\n    // until node has builtin pwnam functions, this'll have to do\n    this.myuid = process.getuid && process.getuid() || 0;\n    this.myuser = process.env.USER || '';\n    this.maxReadSize = opt.maxReadSize || maxReadSize;\n    this.linkCache = opt.linkCache || new Map();\n    this.statCache = opt.statCache || new Map();\n    this.preservePaths = !!opt.preservePaths;\n    this.cwd = normPath(opt.cwd || process.cwd());\n    this.strict = !!opt.strict;\n    this.noPax = !!opt.noPax;\n    this.noMtime = !!opt.noMtime;\n    this.mtime = opt.mtime || null;\n    this.prefix = opt.prefix ? normPath(opt.prefix) : null;\n    this.fd = null;\n    this.blockLen = null;\n    this.blockRemain = null;\n    this.buf = null;\n    this.offset = null;\n    this.length = null;\n    this.pos = null;\n    this.remain = null;\n    if (typeof opt.onwarn === 'function') this.on('warn', opt.onwarn);\n    let pathWarn = false;\n    if (!this.preservePaths) {\n      const [root, stripped] = stripAbsolutePath(this.path);\n      if (root) {\n        this.path = stripped;\n        pathWarn = root;\n      }\n    }\n    this.win32 = !!opt.win32 || process.platform === 'win32';\n    if (this.win32) {\n      // force the \\ to / normalization, since we might not *actually*\n      // be on windows, but want \\ to be considered a path separator.\n      this.path = winchars.decode(this.path.replace(/\\\\/g, '/'));\n      p = p.replace(/\\\\/g, '/');\n    }\n    this.absolute = normPath(opt.absolute || path.resolve(this.cwd, p));\n    if (this.path === '') this.path = './';\n    if (pathWarn) {\n      this.warn('TAR_ENTRY_INFO', `stripping ${pathWarn} from absolute path`, {\n        entry: this,\n        path: pathWarn + this.path\n      });\n    }\n    if (this.statCache.has(this.absolute)) this[ONLSTAT](this.statCache.get(this.absolute));else this[LSTAT]();\n  }\n  emit(ev) {\n    if (ev === 'error') this[HAD_ERROR] = true;\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n    return super.emit(ev, ...data);\n  }\n  [LSTAT]() {\n    fs.lstat(this.absolute, (er, stat) => {\n      if (er) return this.emit('error', er);\n      this[ONLSTAT](stat);\n    });\n  }\n  [ONLSTAT](stat) {\n    this.statCache.set(this.absolute, stat);\n    this.stat = stat;\n    if (!stat.isFile()) stat.size = 0;\n    this.type = getType(stat);\n    this.emit('stat', stat);\n    this[PROCESS]();\n  }\n  [PROCESS]() {\n    switch (this.type) {\n      case 'File':\n        return this[FILE]();\n      case 'Directory':\n        return this[DIRECTORY]();\n      case 'SymbolicLink':\n        return this[SYMLINK]();\n      // unsupported types are ignored.\n      default:\n        return this.end();\n    }\n  }\n  [MODE](mode) {\n    return modeFix(mode, this.type === 'Directory', this.portable);\n  }\n  [PREFIX](path) {\n    return prefixPath(path, this.prefix);\n  }\n  [HEADER]() {\n    if (this.type === 'Directory' && this.portable) this.noMtime = true;\n    this.header = new Header({\n      path: this[PREFIX](this.path),\n      // only apply the prefix to hard links.\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath) : this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this[MODE](this.stat.mode),\n      uid: this.portable ? null : this.stat.uid,\n      gid: this.portable ? null : this.stat.gid,\n      size: this.stat.size,\n      mtime: this.noMtime ? null : this.mtime || this.stat.mtime,\n      type: this.type,\n      uname: this.portable ? null : this.stat.uid === this.myuid ? this.myuser : '',\n      atime: this.portable ? null : this.stat.atime,\n      ctime: this.portable ? null : this.stat.ctime\n    });\n    if (this.header.encode() && !this.noPax) {\n      super.write(new Pax({\n        atime: this.portable ? null : this.header.atime,\n        ctime: this.portable ? null : this.header.ctime,\n        gid: this.portable ? null : this.header.gid,\n        mtime: this.noMtime ? null : this.mtime || this.header.mtime,\n        path: this[PREFIX](this.path),\n        linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath) : this.linkpath,\n        size: this.header.size,\n        uid: this.portable ? null : this.header.uid,\n        uname: this.portable ? null : this.header.uname,\n        dev: this.portable ? null : this.stat.dev,\n        ino: this.portable ? null : this.stat.ino,\n        nlink: this.portable ? null : this.stat.nlink\n      }).encode());\n    }\n    super.write(this.header.block);\n  }\n  [DIRECTORY]() {\n    if (this.path.substr(-1) !== '/') this.path += '/';\n    this.stat.size = 0;\n    this[HEADER]();\n    this.end();\n  }\n  [SYMLINK]() {\n    fs.readlink(this.absolute, (er, linkpath) => {\n      if (er) return this.emit('error', er);\n      this[ONREADLINK](linkpath);\n    });\n  }\n  [ONREADLINK](linkpath) {\n    this.linkpath = normPath(linkpath);\n    this[HEADER]();\n    this.end();\n  }\n  [HARDLINK](linkpath) {\n    this.type = 'Link';\n    this.linkpath = normPath(path.relative(this.cwd, linkpath));\n    this.stat.size = 0;\n    this[HEADER]();\n    this.end();\n  }\n  [FILE]() {\n    if (this.stat.nlink > 1) {\n      const linkKey = this.stat.dev + ':' + this.stat.ino;\n      if (this.linkCache.has(linkKey)) {\n        const linkpath = this.linkCache.get(linkKey);\n        if (linkpath.indexOf(this.cwd) === 0) return this[HARDLINK](linkpath);\n      }\n      this.linkCache.set(linkKey, this.absolute);\n    }\n    this[HEADER]();\n    if (this.stat.size === 0) return this.end();\n    this[OPENFILE]();\n  }\n  [OPENFILE]() {\n    fs.open(this.absolute, 'r', (er, fd) => {\n      if (er) return this.emit('error', er);\n      this[ONOPENFILE](fd);\n    });\n  }\n  [ONOPENFILE](fd) {\n    this.fd = fd;\n    if (this[HAD_ERROR]) return this[CLOSE]();\n    this.blockLen = 512 * Math.ceil(this.stat.size / 512);\n    this.blockRemain = this.blockLen;\n    const bufLen = Math.min(this.blockLen, this.maxReadSize);\n    this.buf = Buffer.allocUnsafe(bufLen);\n    this.offset = 0;\n    this.pos = 0;\n    this.remain = this.stat.size;\n    this.length = this.buf.length;\n    this[READ]();\n  }\n  [READ]() {\n    const {\n      fd,\n      buf,\n      offset,\n      length,\n      pos\n    } = this;\n    fs.read(fd, buf, offset, length, pos, (er, bytesRead) => {\n      if (er) {\n        // ignoring the error from close(2) is a bad practice, but at\n        // this point we already have an error, don't need another one\n        return this[CLOSE](() => this.emit('error', er));\n      }\n      this[ONREAD](bytesRead);\n    });\n  }\n  [CLOSE](cb) {\n    fs.close(this.fd, cb);\n  }\n  [ONREAD](bytesRead) {\n    if (bytesRead <= 0 && this.remain > 0) {\n      const er = new Error('encountered unexpected EOF');\n      er.path = this.absolute;\n      er.syscall = 'read';\n      er.code = 'EOF';\n      return this[CLOSE](() => this.emit('error', er));\n    }\n    if (bytesRead > this.remain) {\n      const er = new Error('did not encounter expected EOF');\n      er.path = this.absolute;\n      er.syscall = 'read';\n      er.code = 'EOF';\n      return this[CLOSE](() => this.emit('error', er));\n    }\n\n    // null out the rest of the buffer, if we could fit the block padding\n    // at the end of this loop, we've incremented bytesRead and this.remain\n    // to be incremented up to the blockRemain level, as if we had expected\n    // to get a null-padded file, and read it until the end.  then we will\n    // decrement both remain and blockRemain by bytesRead, and know that we\n    // reached the expected EOF, without any null buffer to append.\n    if (bytesRead === this.remain) {\n      for (let i = bytesRead; i < this.length && bytesRead < this.blockRemain; i++) {\n        this.buf[i + this.offset] = 0;\n        bytesRead++;\n        this.remain++;\n      }\n    }\n    const writeBuf = this.offset === 0 && bytesRead === this.buf.length ? this.buf : this.buf.slice(this.offset, this.offset + bytesRead);\n    const flushed = this.write(writeBuf);\n    if (!flushed) this[AWAITDRAIN](() => this[ONDRAIN]());else this[ONDRAIN]();\n  }\n  [AWAITDRAIN](cb) {\n    this.once('drain', cb);\n  }\n  write(writeBuf) {\n    if (this.blockRemain < writeBuf.length) {\n      const er = new Error('writing more data than expected');\n      er.path = this.absolute;\n      return this.emit('error', er);\n    }\n    this.remain -= writeBuf.length;\n    this.blockRemain -= writeBuf.length;\n    this.pos += writeBuf.length;\n    this.offset += writeBuf.length;\n    return super.write(writeBuf);\n  }\n  [ONDRAIN]() {\n    if (!this.remain) {\n      if (this.blockRemain) super.write(Buffer.alloc(this.blockRemain));\n      return this[CLOSE](er => er ? this.emit('error', er) : this.end());\n    }\n    if (this.offset >= this.length) {\n      // if we only have a smaller bit left to read, alloc a smaller buffer\n      // otherwise, keep it the same length it was before.\n      this.buf = Buffer.allocUnsafe(Math.min(this.blockRemain, this.buf.length));\n      this.offset = 0;\n    }\n    this.length = this.buf.length - this.offset;\n    this[READ]();\n  }\n});\nclass WriteEntrySync extends WriteEntry {\n  [LSTAT]() {\n    this[ONLSTAT](fs.lstatSync(this.absolute));\n  }\n  [SYMLINK]() {\n    this[ONREADLINK](fs.readlinkSync(this.absolute));\n  }\n  [OPENFILE]() {\n    this[ONOPENFILE](fs.openSync(this.absolute, 'r'));\n  }\n  [READ]() {\n    let threw = true;\n    try {\n      const {\n        fd,\n        buf,\n        offset,\n        length,\n        pos\n      } = this;\n      const bytesRead = fs.readSync(fd, buf, offset, length, pos);\n      this[ONREAD](bytesRead);\n      threw = false;\n    } finally {\n      // ignoring the error from close(2) is a bad practice, but at\n      // this point we already have an error, don't need another one\n      if (threw) {\n        try {\n          this[CLOSE](() => {});\n        } catch (er) {}\n      }\n    }\n  }\n  [AWAITDRAIN](cb) {\n    cb();\n  }\n  [CLOSE](cb) {\n    fs.closeSync(this.fd);\n    cb();\n  }\n}\nconst WriteEntryTar = warner(class WriteEntryTar extends MiniPass {\n  constructor(readEntry, opt) {\n    opt = opt || {};\n    super(opt);\n    this.preservePaths = !!opt.preservePaths;\n    this.portable = !!opt.portable;\n    this.strict = !!opt.strict;\n    this.noPax = !!opt.noPax;\n    this.noMtime = !!opt.noMtime;\n    this.readEntry = readEntry;\n    this.type = readEntry.type;\n    if (this.type === 'Directory' && this.portable) this.noMtime = true;\n    this.prefix = opt.prefix || null;\n    this.path = normPath(readEntry.path);\n    this.mode = this[MODE](readEntry.mode);\n    this.uid = this.portable ? null : readEntry.uid;\n    this.gid = this.portable ? null : readEntry.gid;\n    this.uname = this.portable ? null : readEntry.uname;\n    this.gname = this.portable ? null : readEntry.gname;\n    this.size = readEntry.size;\n    this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime;\n    this.atime = this.portable ? null : readEntry.atime;\n    this.ctime = this.portable ? null : readEntry.ctime;\n    this.linkpath = normPath(readEntry.linkpath);\n    if (typeof opt.onwarn === 'function') this.on('warn', opt.onwarn);\n    let pathWarn = false;\n    if (!this.preservePaths) {\n      const [root, stripped] = stripAbsolutePath(this.path);\n      if (root) {\n        this.path = stripped;\n        pathWarn = root;\n      }\n    }\n    this.remain = readEntry.size;\n    this.blockRemain = readEntry.startBlockSize;\n    this.header = new Header({\n      path: this[PREFIX](this.path),\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath) : this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this.mode,\n      uid: this.portable ? null : this.uid,\n      gid: this.portable ? null : this.gid,\n      size: this.size,\n      mtime: this.noMtime ? null : this.mtime,\n      type: this.type,\n      uname: this.portable ? null : this.uname,\n      atime: this.portable ? null : this.atime,\n      ctime: this.portable ? null : this.ctime\n    });\n    if (pathWarn) {\n      this.warn('TAR_ENTRY_INFO', `stripping ${pathWarn} from absolute path`, {\n        entry: this,\n        path: pathWarn + this.path\n      });\n    }\n    if (this.header.encode() && !this.noPax) {\n      super.write(new Pax({\n        atime: this.portable ? null : this.atime,\n        ctime: this.portable ? null : this.ctime,\n        gid: this.portable ? null : this.gid,\n        mtime: this.noMtime ? null : this.mtime,\n        path: this[PREFIX](this.path),\n        linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath) : this.linkpath,\n        size: this.size,\n        uid: this.portable ? null : this.uid,\n        uname: this.portable ? null : this.uname,\n        dev: this.portable ? null : this.readEntry.dev,\n        ino: this.portable ? null : this.readEntry.ino,\n        nlink: this.portable ? null : this.readEntry.nlink\n      }).encode());\n    }\n    super.write(this.header.block);\n    readEntry.pipe(this);\n  }\n  [PREFIX](path) {\n    return prefixPath(path, this.prefix);\n  }\n  [MODE](mode) {\n    return modeFix(mode, this.type === 'Directory', this.portable);\n  }\n  write(data) {\n    const writeLen = data.length;\n    if (writeLen > this.blockRemain) throw new Error('writing more to entry than is appropriate');\n    this.blockRemain -= writeLen;\n    return super.write(data);\n  }\n  end() {\n    if (this.blockRemain) super.write(Buffer.alloc(this.blockRemain));\n    return super.end();\n  }\n});\nWriteEntry.Sync = WriteEntrySync;\nWriteEntry.Tar = WriteEntryTar;\nconst getType = stat => stat.isFile() ? 'File' : stat.isDirectory() ? 'Directory' : stat.isSymbolicLink() ? 'SymbolicLink' : 'Unsupported';\nmodule.exports = WriteEntry;","map":{"version":3,"names":["MiniPass","require","Pax","Header","fs","path","normPath","stripSlash","prefixPath","prefix","replace","maxReadSize","PROCESS","Symbol","FILE","DIRECTORY","SYMLINK","HARDLINK","HEADER","READ","LSTAT","ONLSTAT","ONREAD","ONREADLINK","OPENFILE","ONOPENFILE","CLOSE","MODE","AWAITDRAIN","ONDRAIN","PREFIX","HAD_ERROR","warner","winchars","stripAbsolutePath","modeFix","WriteEntry","constructor","p","opt","TypeError","portable","myuid","process","getuid","myuser","env","USER","linkCache","Map","statCache","preservePaths","cwd","strict","noPax","noMtime","mtime","fd","blockLen","blockRemain","buf","offset","length","pos","remain","onwarn","on","pathWarn","root","stripped","win32","platform","decode","absolute","resolve","warn","entry","has","get","emit","ev","_len","arguments","data","Array","_key","lstat","er","stat","set","isFile","size","type","getType","end","mode","header","linkpath","uid","gid","uname","atime","ctime","encode","write","dev","ino","nlink","block","substr","readlink","relative","linkKey","indexOf","open","Math","ceil","bufLen","min","Buffer","allocUnsafe","read","bytesRead","cb","close","Error","syscall","code","i","writeBuf","slice","flushed","once","alloc","WriteEntrySync","lstatSync","readlinkSync","openSync","threw","readSync","closeSync","WriteEntryTar","readEntry","gname","startBlockSize","pipe","writeLen","Sync","Tar","isDirectory","isSymbolicLink","module","exports"],"sources":["C:/Users/ACER/node_modules/@mapbox/node-pre-gyp/node_modules/tar/lib/write-entry.js"],"sourcesContent":["'use strict'\nconst MiniPass = require('minipass')\nconst Pax = require('./pax.js')\nconst Header = require('./header.js')\nconst fs = require('fs')\nconst path = require('path')\nconst normPath = require('./normalize-windows-path.js')\nconst stripSlash = require('./strip-trailing-slashes.js')\n\nconst prefixPath = (path, prefix) => {\n  if (!prefix)\n    return normPath(path)\n  path = normPath(path).replace(/^\\.(\\/|$)/, '')\n  return stripSlash(prefix) + '/' + path\n}\n\nconst maxReadSize = 16 * 1024 * 1024\nconst PROCESS = Symbol('process')\nconst FILE = Symbol('file')\nconst DIRECTORY = Symbol('directory')\nconst SYMLINK = Symbol('symlink')\nconst HARDLINK = Symbol('hardlink')\nconst HEADER = Symbol('header')\nconst READ = Symbol('read')\nconst LSTAT = Symbol('lstat')\nconst ONLSTAT = Symbol('onlstat')\nconst ONREAD = Symbol('onread')\nconst ONREADLINK = Symbol('onreadlink')\nconst OPENFILE = Symbol('openfile')\nconst ONOPENFILE = Symbol('onopenfile')\nconst CLOSE = Symbol('close')\nconst MODE = Symbol('mode')\nconst AWAITDRAIN = Symbol('awaitDrain')\nconst ONDRAIN = Symbol('ondrain')\nconst PREFIX = Symbol('prefix')\nconst HAD_ERROR = Symbol('hadError')\nconst warner = require('./warn-mixin.js')\nconst winchars = require('./winchars.js')\nconst stripAbsolutePath = require('./strip-absolute-path.js')\n\nconst modeFix = require('./mode-fix.js')\n\nconst WriteEntry = warner(class WriteEntry extends MiniPass {\n  constructor (p, opt) {\n    opt = opt || {}\n    super(opt)\n    if (typeof p !== 'string')\n      throw new TypeError('path is required')\n    this.path = normPath(p)\n    // suppress atime, ctime, uid, gid, uname, gname\n    this.portable = !!opt.portable\n    // until node has builtin pwnam functions, this'll have to do\n    this.myuid = process.getuid && process.getuid() || 0\n    this.myuser = process.env.USER || ''\n    this.maxReadSize = opt.maxReadSize || maxReadSize\n    this.linkCache = opt.linkCache || new Map()\n    this.statCache = opt.statCache || new Map()\n    this.preservePaths = !!opt.preservePaths\n    this.cwd = normPath(opt.cwd || process.cwd())\n    this.strict = !!opt.strict\n    this.noPax = !!opt.noPax\n    this.noMtime = !!opt.noMtime\n    this.mtime = opt.mtime || null\n    this.prefix = opt.prefix ? normPath(opt.prefix) : null\n\n    this.fd = null\n    this.blockLen = null\n    this.blockRemain = null\n    this.buf = null\n    this.offset = null\n    this.length = null\n    this.pos = null\n    this.remain = null\n\n    if (typeof opt.onwarn === 'function')\n      this.on('warn', opt.onwarn)\n\n    let pathWarn = false\n    if (!this.preservePaths) {\n      const [root, stripped] = stripAbsolutePath(this.path)\n      if (root) {\n        this.path = stripped\n        pathWarn = root\n      }\n    }\n\n    this.win32 = !!opt.win32 || process.platform === 'win32'\n    if (this.win32) {\n      // force the \\ to / normalization, since we might not *actually*\n      // be on windows, but want \\ to be considered a path separator.\n      this.path = winchars.decode(this.path.replace(/\\\\/g, '/'))\n      p = p.replace(/\\\\/g, '/')\n    }\n\n    this.absolute = normPath(opt.absolute || path.resolve(this.cwd, p))\n\n    if (this.path === '')\n      this.path = './'\n\n    if (pathWarn) {\n      this.warn('TAR_ENTRY_INFO', `stripping ${pathWarn} from absolute path`, {\n        entry: this,\n        path: pathWarn + this.path,\n      })\n    }\n\n    if (this.statCache.has(this.absolute))\n      this[ONLSTAT](this.statCache.get(this.absolute))\n    else\n      this[LSTAT]()\n  }\n\n  emit (ev, ...data) {\n    if (ev === 'error')\n      this[HAD_ERROR] = true\n    return super.emit(ev, ...data)\n  }\n\n  [LSTAT] () {\n    fs.lstat(this.absolute, (er, stat) => {\n      if (er)\n        return this.emit('error', er)\n      this[ONLSTAT](stat)\n    })\n  }\n\n  [ONLSTAT] (stat) {\n    this.statCache.set(this.absolute, stat)\n    this.stat = stat\n    if (!stat.isFile())\n      stat.size = 0\n    this.type = getType(stat)\n    this.emit('stat', stat)\n    this[PROCESS]()\n  }\n\n  [PROCESS] () {\n    switch (this.type) {\n      case 'File': return this[FILE]()\n      case 'Directory': return this[DIRECTORY]()\n      case 'SymbolicLink': return this[SYMLINK]()\n      // unsupported types are ignored.\n      default: return this.end()\n    }\n  }\n\n  [MODE] (mode) {\n    return modeFix(mode, this.type === 'Directory', this.portable)\n  }\n\n  [PREFIX] (path) {\n    return prefixPath(path, this.prefix)\n  }\n\n  [HEADER] () {\n    if (this.type === 'Directory' && this.portable)\n      this.noMtime = true\n\n    this.header = new Header({\n      path: this[PREFIX](this.path),\n      // only apply the prefix to hard links.\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n      : this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this[MODE](this.stat.mode),\n      uid: this.portable ? null : this.stat.uid,\n      gid: this.portable ? null : this.stat.gid,\n      size: this.stat.size,\n      mtime: this.noMtime ? null : this.mtime || this.stat.mtime,\n      type: this.type,\n      uname: this.portable ? null :\n      this.stat.uid === this.myuid ? this.myuser : '',\n      atime: this.portable ? null : this.stat.atime,\n      ctime: this.portable ? null : this.stat.ctime,\n    })\n\n    if (this.header.encode() && !this.noPax) {\n      super.write(new Pax({\n        atime: this.portable ? null : this.header.atime,\n        ctime: this.portable ? null : this.header.ctime,\n        gid: this.portable ? null : this.header.gid,\n        mtime: this.noMtime ? null : this.mtime || this.header.mtime,\n        path: this[PREFIX](this.path),\n        linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n        : this.linkpath,\n        size: this.header.size,\n        uid: this.portable ? null : this.header.uid,\n        uname: this.portable ? null : this.header.uname,\n        dev: this.portable ? null : this.stat.dev,\n        ino: this.portable ? null : this.stat.ino,\n        nlink: this.portable ? null : this.stat.nlink,\n      }).encode())\n    }\n    super.write(this.header.block)\n  }\n\n  [DIRECTORY] () {\n    if (this.path.substr(-1) !== '/')\n      this.path += '/'\n    this.stat.size = 0\n    this[HEADER]()\n    this.end()\n  }\n\n  [SYMLINK] () {\n    fs.readlink(this.absolute, (er, linkpath) => {\n      if (er)\n        return this.emit('error', er)\n      this[ONREADLINK](linkpath)\n    })\n  }\n\n  [ONREADLINK] (linkpath) {\n    this.linkpath = normPath(linkpath)\n    this[HEADER]()\n    this.end()\n  }\n\n  [HARDLINK] (linkpath) {\n    this.type = 'Link'\n    this.linkpath = normPath(path.relative(this.cwd, linkpath))\n    this.stat.size = 0\n    this[HEADER]()\n    this.end()\n  }\n\n  [FILE] () {\n    if (this.stat.nlink > 1) {\n      const linkKey = this.stat.dev + ':' + this.stat.ino\n      if (this.linkCache.has(linkKey)) {\n        const linkpath = this.linkCache.get(linkKey)\n        if (linkpath.indexOf(this.cwd) === 0)\n          return this[HARDLINK](linkpath)\n      }\n      this.linkCache.set(linkKey, this.absolute)\n    }\n\n    this[HEADER]()\n    if (this.stat.size === 0)\n      return this.end()\n\n    this[OPENFILE]()\n  }\n\n  [OPENFILE] () {\n    fs.open(this.absolute, 'r', (er, fd) => {\n      if (er)\n        return this.emit('error', er)\n      this[ONOPENFILE](fd)\n    })\n  }\n\n  [ONOPENFILE] (fd) {\n    this.fd = fd\n    if (this[HAD_ERROR])\n      return this[CLOSE]()\n\n    this.blockLen = 512 * Math.ceil(this.stat.size / 512)\n    this.blockRemain = this.blockLen\n    const bufLen = Math.min(this.blockLen, this.maxReadSize)\n    this.buf = Buffer.allocUnsafe(bufLen)\n    this.offset = 0\n    this.pos = 0\n    this.remain = this.stat.size\n    this.length = this.buf.length\n    this[READ]()\n  }\n\n  [READ] () {\n    const { fd, buf, offset, length, pos } = this\n    fs.read(fd, buf, offset, length, pos, (er, bytesRead) => {\n      if (er) {\n        // ignoring the error from close(2) is a bad practice, but at\n        // this point we already have an error, don't need another one\n        return this[CLOSE](() => this.emit('error', er))\n      }\n      this[ONREAD](bytesRead)\n    })\n  }\n\n  [CLOSE] (cb) {\n    fs.close(this.fd, cb)\n  }\n\n  [ONREAD] (bytesRead) {\n    if (bytesRead <= 0 && this.remain > 0) {\n      const er = new Error('encountered unexpected EOF')\n      er.path = this.absolute\n      er.syscall = 'read'\n      er.code = 'EOF'\n      return this[CLOSE](() => this.emit('error', er))\n    }\n\n    if (bytesRead > this.remain) {\n      const er = new Error('did not encounter expected EOF')\n      er.path = this.absolute\n      er.syscall = 'read'\n      er.code = 'EOF'\n      return this[CLOSE](() => this.emit('error', er))\n    }\n\n    // null out the rest of the buffer, if we could fit the block padding\n    // at the end of this loop, we've incremented bytesRead and this.remain\n    // to be incremented up to the blockRemain level, as if we had expected\n    // to get a null-padded file, and read it until the end.  then we will\n    // decrement both remain and blockRemain by bytesRead, and know that we\n    // reached the expected EOF, without any null buffer to append.\n    if (bytesRead === this.remain) {\n      for (let i = bytesRead; i < this.length && bytesRead < this.blockRemain; i++) {\n        this.buf[i + this.offset] = 0\n        bytesRead++\n        this.remain++\n      }\n    }\n\n    const writeBuf = this.offset === 0 && bytesRead === this.buf.length ?\n      this.buf : this.buf.slice(this.offset, this.offset + bytesRead)\n\n    const flushed = this.write(writeBuf)\n    if (!flushed)\n      this[AWAITDRAIN](() => this[ONDRAIN]())\n    else\n      this[ONDRAIN]()\n  }\n\n  [AWAITDRAIN] (cb) {\n    this.once('drain', cb)\n  }\n\n  write (writeBuf) {\n    if (this.blockRemain < writeBuf.length) {\n      const er = new Error('writing more data than expected')\n      er.path = this.absolute\n      return this.emit('error', er)\n    }\n    this.remain -= writeBuf.length\n    this.blockRemain -= writeBuf.length\n    this.pos += writeBuf.length\n    this.offset += writeBuf.length\n    return super.write(writeBuf)\n  }\n\n  [ONDRAIN] () {\n    if (!this.remain) {\n      if (this.blockRemain)\n        super.write(Buffer.alloc(this.blockRemain))\n      return this[CLOSE](er => er ? this.emit('error', er) : this.end())\n    }\n\n    if (this.offset >= this.length) {\n      // if we only have a smaller bit left to read, alloc a smaller buffer\n      // otherwise, keep it the same length it was before.\n      this.buf = Buffer.allocUnsafe(Math.min(this.blockRemain, this.buf.length))\n      this.offset = 0\n    }\n    this.length = this.buf.length - this.offset\n    this[READ]()\n  }\n})\n\nclass WriteEntrySync extends WriteEntry {\n  [LSTAT] () {\n    this[ONLSTAT](fs.lstatSync(this.absolute))\n  }\n\n  [SYMLINK] () {\n    this[ONREADLINK](fs.readlinkSync(this.absolute))\n  }\n\n  [OPENFILE] () {\n    this[ONOPENFILE](fs.openSync(this.absolute, 'r'))\n  }\n\n  [READ] () {\n    let threw = true\n    try {\n      const { fd, buf, offset, length, pos } = this\n      const bytesRead = fs.readSync(fd, buf, offset, length, pos)\n      this[ONREAD](bytesRead)\n      threw = false\n    } finally {\n      // ignoring the error from close(2) is a bad practice, but at\n      // this point we already have an error, don't need another one\n      if (threw) {\n        try {\n          this[CLOSE](() => {})\n        } catch (er) {}\n      }\n    }\n  }\n\n  [AWAITDRAIN] (cb) {\n    cb()\n  }\n\n  [CLOSE] (cb) {\n    fs.closeSync(this.fd)\n    cb()\n  }\n}\n\nconst WriteEntryTar = warner(class WriteEntryTar extends MiniPass {\n  constructor (readEntry, opt) {\n    opt = opt || {}\n    super(opt)\n    this.preservePaths = !!opt.preservePaths\n    this.portable = !!opt.portable\n    this.strict = !!opt.strict\n    this.noPax = !!opt.noPax\n    this.noMtime = !!opt.noMtime\n\n    this.readEntry = readEntry\n    this.type = readEntry.type\n    if (this.type === 'Directory' && this.portable)\n      this.noMtime = true\n\n    this.prefix = opt.prefix || null\n\n    this.path = normPath(readEntry.path)\n    this.mode = this[MODE](readEntry.mode)\n    this.uid = this.portable ? null : readEntry.uid\n    this.gid = this.portable ? null : readEntry.gid\n    this.uname = this.portable ? null : readEntry.uname\n    this.gname = this.portable ? null : readEntry.gname\n    this.size = readEntry.size\n    this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime\n    this.atime = this.portable ? null : readEntry.atime\n    this.ctime = this.portable ? null : readEntry.ctime\n    this.linkpath = normPath(readEntry.linkpath)\n\n    if (typeof opt.onwarn === 'function')\n      this.on('warn', opt.onwarn)\n\n    let pathWarn = false\n    if (!this.preservePaths) {\n      const [root, stripped] = stripAbsolutePath(this.path)\n      if (root) {\n        this.path = stripped\n        pathWarn = root\n      }\n    }\n\n    this.remain = readEntry.size\n    this.blockRemain = readEntry.startBlockSize\n\n    this.header = new Header({\n      path: this[PREFIX](this.path),\n      linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n      : this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this.mode,\n      uid: this.portable ? null : this.uid,\n      gid: this.portable ? null : this.gid,\n      size: this.size,\n      mtime: this.noMtime ? null : this.mtime,\n      type: this.type,\n      uname: this.portable ? null : this.uname,\n      atime: this.portable ? null : this.atime,\n      ctime: this.portable ? null : this.ctime,\n    })\n\n    if (pathWarn) {\n      this.warn('TAR_ENTRY_INFO', `stripping ${pathWarn} from absolute path`, {\n        entry: this,\n        path: pathWarn + this.path,\n      })\n    }\n\n    if (this.header.encode() && !this.noPax) {\n      super.write(new Pax({\n        atime: this.portable ? null : this.atime,\n        ctime: this.portable ? null : this.ctime,\n        gid: this.portable ? null : this.gid,\n        mtime: this.noMtime ? null : this.mtime,\n        path: this[PREFIX](this.path),\n        linkpath: this.type === 'Link' ? this[PREFIX](this.linkpath)\n        : this.linkpath,\n        size: this.size,\n        uid: this.portable ? null : this.uid,\n        uname: this.portable ? null : this.uname,\n        dev: this.portable ? null : this.readEntry.dev,\n        ino: this.portable ? null : this.readEntry.ino,\n        nlink: this.portable ? null : this.readEntry.nlink,\n      }).encode())\n    }\n\n    super.write(this.header.block)\n    readEntry.pipe(this)\n  }\n\n  [PREFIX] (path) {\n    return prefixPath(path, this.prefix)\n  }\n\n  [MODE] (mode) {\n    return modeFix(mode, this.type === 'Directory', this.portable)\n  }\n\n  write (data) {\n    const writeLen = data.length\n    if (writeLen > this.blockRemain)\n      throw new Error('writing more to entry than is appropriate')\n    this.blockRemain -= writeLen\n    return super.write(data)\n  }\n\n  end () {\n    if (this.blockRemain)\n      super.write(Buffer.alloc(this.blockRemain))\n    return super.end()\n  }\n})\n\nWriteEntry.Sync = WriteEntrySync\nWriteEntry.Tar = WriteEntryTar\n\nconst getType = stat =>\n  stat.isFile() ? 'File'\n  : stat.isDirectory() ? 'Directory'\n  : stat.isSymbolicLink() ? 'SymbolicLink'\n  : 'Unsupported'\n\nmodule.exports = WriteEntry\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}