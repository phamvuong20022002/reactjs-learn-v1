{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"./nodejs_kernel_backend\");\nvar SummaryFileWriter = /** @class */function () {\n  function SummaryFileWriter(resourceHandle) {\n    this.resourceHandle = resourceHandle;\n    nodejs_kernel_backend_1.ensureTensorflowBackend();\n    this.backend = nodejs_kernel_backend_1.nodeBackend();\n  }\n  /**\n   * Write a scalar summary.\n   *\n   * @param name A name of the summary. The summary tag for TensorBoard will be\n   *   this name.\n   * @param value A real numeric scalar value, as `tf.Scalar` or a JavaScript\n   *   `number`.\n   * @param step Required `int64`-castable, monotonically-increasing step value.\n   * @param description Optional long-form description for this summary, as a\n   *   `string`. *Not implemented yet*.\n   */\n  SummaryFileWriter.prototype.scalar = function (name, value, step, description) {\n    // N.B.: Unlike the Python TensorFlow API, step is a required parameter,\n    // because the construct of global step does not exist in TensorFlow.js.\n    if (description != null) {\n      throw new Error('scalar() does not support description yet');\n    }\n    this.backend.writeScalarSummary(this.resourceHandle, step, name, value);\n  };\n  /**\n   * Write a histogram summary, for later analysis in TensorBoard's 'Histograms'\n   * and 'Distributions' dashboards (data written using this API will appear in\n   * both places). Like `SummaryFileWriter.scalar` points, each histogram is\n   * associated with a `step` and a `name`. All the histograms with the same\n   * `name` constitute a time series of histograms.\n   *\n   * The histogram is calculated over all the elements of the given `Tensor`\n   * without regard to its shape or rank.\n   *\n   * @param name  A name for this summary. The summary tag used for TensorBoard\n   *     will be this name.\n   * @param data  A Tensor of any shape. The histogram is computed over its\n   *     elements, which must be castable to `float32`.\n   * @param step  Monotonically-increasing step value.\n   * @param buckets  Optional positive `number`. The output will have this many\n   *     buckets, except in two edge cases. If there is no data, then there are\n   *     no buckets. If there is data but all points have the same value, then\n   *     there is one bucket whose left and right endpoints are the same.\n   * @param description Optional long-form description for this summary, as a\n   *    `string`. Markdown is supported. Defaults to empty.\n   */\n  SummaryFileWriter.prototype.histogram = function (name, data, step, buckets, description) {\n    this.backend.writeHistogramSummary(this.resourceHandle, step, name, data, buckets, description);\n  };\n  /**\n   * Force summary writer to send all buffered data to storage.\n   */\n  SummaryFileWriter.prototype.flush = function () {\n    this.backend.flushSummaryWriter(this.resourceHandle);\n  };\n  return SummaryFileWriter;\n}();\nexports.SummaryFileWriter = SummaryFileWriter;\n/**\n * Use a cache for `SummaryFileWriter` instance.\n *\n * Using multiple instances of `SummaryFileWriter` pointing to the same\n * logdir has potential problems. Using this cache avoids those problems.\n */\nvar summaryFileWriterCache = {};\n/**\n * Create a summary file writer for TensorBoard.\n *\n * Example:\n * ```js\n * const tf = require('@tensorflow/tfjs-node');\n *\n * const summaryWriter = tf.node.summaryFileWriter('/tmp/tfjs_tb_logdir');\n *\n * for (let step = 0; step < 100; ++step) {\n *  summaryWriter.scalar('dummyValue', Math.sin(2 * Math.PI * step / 8), step);\n * }\n * ```\n *\n * @param logdir Log directory in which the summary data will be written.\n * @param maxQueue Maximum queue length (default: `10`).\n * @param flushMillis Flush every __ milliseconds (default: `120e3`, i.e,\n *   `120` seconds).\n * @param filenameSuffix Suffix of the protocol buffer file names to be\n *   written in the `logdir` (default: `.v2`).\n * @returns An instance of `SummaryFileWriter`.\n *\n * @doc {heading: 'TensorBoard', namespace: 'node'}\n */\nfunction summaryFileWriter(logdir, maxQueue, flushMillis, filenameSuffix) {\n  if (maxQueue === void 0) {\n    maxQueue = 10;\n  }\n  if (flushMillis === void 0) {\n    flushMillis = 120000;\n  }\n  if (filenameSuffix === void 0) {\n    filenameSuffix = '.v2';\n  }\n  tfjs_1.util.assert(logdir != null && typeof logdir === 'string' && logdir.length > 0, function () {\n    return \"Invalid logdir: \" + logdir + \". Expected a non-empty string for logdir.\";\n  });\n  if (!(logdir in summaryFileWriterCache)) {\n    nodejs_kernel_backend_1.ensureTensorflowBackend();\n    var backend = nodejs_kernel_backend_1.nodeBackend();\n    var writerResource = backend.summaryWriter(logdir);\n    backend.createSummaryFileWriter(writerResource, logdir, maxQueue, flushMillis, filenameSuffix);\n    summaryFileWriterCache[logdir] = new SummaryFileWriter(writerResource);\n  }\n  return summaryFileWriterCache[logdir];\n}\nexports.summaryFileWriter = summaryFileWriter;","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","SummaryFileWriter","resourceHandle","ensureTensorflowBackend","backend","nodeBackend","prototype","scalar","name","step","description","Error","writeScalarSummary","histogram","data","buckets","writeHistogramSummary","flush","flushSummaryWriter","summaryFileWriterCache","summaryFileWriter","logdir","maxQueue","flushMillis","filenameSuffix","util","assert","length","writerResource","summaryWriter","createSummaryFileWriter"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/tensorboard.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"./nodejs_kernel_backend\");\nvar SummaryFileWriter = /** @class */ (function () {\n    function SummaryFileWriter(resourceHandle) {\n        this.resourceHandle = resourceHandle;\n        nodejs_kernel_backend_1.ensureTensorflowBackend();\n        this.backend = nodejs_kernel_backend_1.nodeBackend();\n    }\n    /**\n     * Write a scalar summary.\n     *\n     * @param name A name of the summary. The summary tag for TensorBoard will be\n     *   this name.\n     * @param value A real numeric scalar value, as `tf.Scalar` or a JavaScript\n     *   `number`.\n     * @param step Required `int64`-castable, monotonically-increasing step value.\n     * @param description Optional long-form description for this summary, as a\n     *   `string`. *Not implemented yet*.\n     */\n    SummaryFileWriter.prototype.scalar = function (name, value, step, description) {\n        // N.B.: Unlike the Python TensorFlow API, step is a required parameter,\n        // because the construct of global step does not exist in TensorFlow.js.\n        if (description != null) {\n            throw new Error('scalar() does not support description yet');\n        }\n        this.backend.writeScalarSummary(this.resourceHandle, step, name, value);\n    };\n    /**\n     * Write a histogram summary, for later analysis in TensorBoard's 'Histograms'\n     * and 'Distributions' dashboards (data written using this API will appear in\n     * both places). Like `SummaryFileWriter.scalar` points, each histogram is\n     * associated with a `step` and a `name`. All the histograms with the same\n     * `name` constitute a time series of histograms.\n     *\n     * The histogram is calculated over all the elements of the given `Tensor`\n     * without regard to its shape or rank.\n     *\n     * @param name  A name for this summary. The summary tag used for TensorBoard\n     *     will be this name.\n     * @param data  A Tensor of any shape. The histogram is computed over its\n     *     elements, which must be castable to `float32`.\n     * @param step  Monotonically-increasing step value.\n     * @param buckets  Optional positive `number`. The output will have this many\n     *     buckets, except in two edge cases. If there is no data, then there are\n     *     no buckets. If there is data but all points have the same value, then\n     *     there is one bucket whose left and right endpoints are the same.\n     * @param description Optional long-form description for this summary, as a\n     *    `string`. Markdown is supported. Defaults to empty.\n     */\n    SummaryFileWriter.prototype.histogram = function (name, data, step, buckets, description) {\n        this.backend.writeHistogramSummary(this.resourceHandle, step, name, data, buckets, description);\n    };\n    /**\n     * Force summary writer to send all buffered data to storage.\n     */\n    SummaryFileWriter.prototype.flush = function () {\n        this.backend.flushSummaryWriter(this.resourceHandle);\n    };\n    return SummaryFileWriter;\n}());\nexports.SummaryFileWriter = SummaryFileWriter;\n/**\n * Use a cache for `SummaryFileWriter` instance.\n *\n * Using multiple instances of `SummaryFileWriter` pointing to the same\n * logdir has potential problems. Using this cache avoids those problems.\n */\nvar summaryFileWriterCache = {};\n/**\n * Create a summary file writer for TensorBoard.\n *\n * Example:\n * ```js\n * const tf = require('@tensorflow/tfjs-node');\n *\n * const summaryWriter = tf.node.summaryFileWriter('/tmp/tfjs_tb_logdir');\n *\n * for (let step = 0; step < 100; ++step) {\n *  summaryWriter.scalar('dummyValue', Math.sin(2 * Math.PI * step / 8), step);\n * }\n * ```\n *\n * @param logdir Log directory in which the summary data will be written.\n * @param maxQueue Maximum queue length (default: `10`).\n * @param flushMillis Flush every __ milliseconds (default: `120e3`, i.e,\n *   `120` seconds).\n * @param filenameSuffix Suffix of the protocol buffer file names to be\n *   written in the `logdir` (default: `.v2`).\n * @returns An instance of `SummaryFileWriter`.\n *\n * @doc {heading: 'TensorBoard', namespace: 'node'}\n */\nfunction summaryFileWriter(logdir, maxQueue, flushMillis, filenameSuffix) {\n    if (maxQueue === void 0) { maxQueue = 10; }\n    if (flushMillis === void 0) { flushMillis = 120000; }\n    if (filenameSuffix === void 0) { filenameSuffix = '.v2'; }\n    tfjs_1.util.assert(logdir != null && typeof logdir === 'string' && logdir.length > 0, function () {\n        return \"Invalid logdir: \" + logdir + \". Expected a non-empty string for logdir.\";\n    });\n    if (!(logdir in summaryFileWriterCache)) {\n        nodejs_kernel_backend_1.ensureTensorflowBackend();\n        var backend = nodejs_kernel_backend_1.nodeBackend();\n        var writerResource = backend.summaryWriter(logdir);\n        backend.createSummaryFileWriter(writerResource, logdir, maxQueue, flushMillis, filenameSuffix);\n        summaryFileWriterCache[logdir] = new SummaryFileWriter(writerResource);\n    }\n    return summaryFileWriterCache[logdir];\n}\nexports.summaryFileWriter = summaryFileWriter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}