{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.maxPoolGradConfig = {\n  kernelName: tfjs_1.MaxPoolGrad,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n      dy = _a.dy,\n      input = _a.input,\n      output = _a.output;\n    var backend = args.backend;\n    var _b = args.attrs,\n      filterSize = _b.filterSize,\n      strides = _b.strides,\n      pad = _b.pad,\n      dimRoundingMode = _b.dimRoundingMode;\n    var convInfo = tfjs_1.backend_util.computePool2DInfo(input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n      throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" + (\"while padding type was \" + convInfo.padInfo.type));\n    }\n    var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n    var $strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n    var padding = convInfo.padInfo.type;\n    var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', input.dtype), {\n      name: 'ksize',\n      type: backend.binding.TF_ATTR_INT,\n      value: ksize\n    }, {\n      name: 'strides',\n      type: backend.binding.TF_ATTR_INT,\n      value: $strides\n    }, {\n      name: 'padding',\n      type: backend.binding.TF_ATTR_STRING,\n      value: padding\n    }, {\n      name: 'data_format',\n      type: backend.binding.TF_ATTR_STRING,\n      value: dataFormat\n    }];\n    return backend.executeSingleOutput(tfjs_1.MaxPoolGrad, opAttrs, [input, output, dy]);\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","maxPoolGradConfig","kernelName","MaxPoolGrad","backendName","kernelFunc","args","_a","inputs","dy","input","output","backend","_b","attrs","filterSize","strides","pad","dimRoundingMode","convInfo","backend_util","computePool2DInfo","shape","padInfo","type","Error","ksize","filterHeight","filterWidth","$strides","strideHeight","strideWidth","padding","dataFormat","opAttrs","createTensorsTypeOpAttr","dtype","name","binding","TF_ATTR_INT","TF_ATTR_STRING","executeSingleOutput"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/kernels/MaxPoolGrad.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.maxPoolGradConfig = {\n    kernelName: tfjs_1.MaxPoolGrad,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, dy = _a.dy, input = _a.input, output = _a.output;\n        var backend = args.backend;\n        var _b = args.attrs, filterSize = _b.filterSize, strides = _b.strides, pad = _b.pad, dimRoundingMode = _b.dimRoundingMode;\n        var convInfo = tfjs_1.backend_util.computePool2DInfo(input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n        if (convInfo.padInfo.type !== 'VALID' && convInfo.padInfo.type !== 'SAME') {\n            throw new Error(\"TF Backend supports only 'valid' and 'same' padding \" +\n                (\"while padding type was \" + convInfo.padInfo.type));\n        }\n        var ksize = [1, convInfo.filterHeight, convInfo.filterWidth, 1];\n        var $strides = [1, convInfo.strideHeight, convInfo.strideWidth, 1];\n        var padding = convInfo.padInfo.type;\n        var dataFormat = convInfo.dataFormat === 'channelsLast' ? 'NHWC' : 'NCHW';\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', input.dtype),\n            { name: 'ksize', type: backend.binding.TF_ATTR_INT, value: ksize },\n            { name: 'strides', type: backend.binding.TF_ATTR_INT, value: $strides },\n            { name: 'padding', type: backend.binding.TF_ATTR_STRING, value: padding },\n            {\n                name: 'data_format',\n                type: backend.binding.TF_ATTR_STRING,\n                value: dataFormat\n            },\n        ];\n        return backend.executeSingleOutput(tfjs_1.MaxPoolGrad, opAttrs, [input, output, dy]);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}