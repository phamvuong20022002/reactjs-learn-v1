{"ast":null,"code":"'use strict';\n\n/**\n * Module exports.\n */\nmodule.exports = exports;\n\n/**\n * Module dependencies.\n */\n\n// load mocking control function for accessing s3 via https. the function is a noop always returning\n// false if not mocking.\nexports.mockS3Http = require('./util/s3_setup').get_mockS3Http();\nexports.mockS3Http('on');\nconst mocking = exports.mockS3Http('get');\nconst fs = require('fs');\nconst path = require('path');\nconst nopt = require('nopt');\nconst log = require('npmlog');\nlog.disableProgress();\nconst napi = require('./util/napi.js');\nconst EE = require('events').EventEmitter;\nconst inherits = require('util').inherits;\nconst cli_commands = ['clean', 'install', 'reinstall', 'build', 'rebuild', 'package', 'testpackage', 'publish', 'unpublish', 'info', 'testbinary', 'reveal', 'configure'];\nconst aliases = {};\n\n// differentiate node-pre-gyp's logs from npm's\nlog.heading = 'node-pre-gyp';\nif (mocking) {\n  log.warn(`mocking s3 to ${process.env.node_pre_gyp_mock_s3}`);\n}\nexports.find = require('./pre-binding').find;\n\n//\n// in the following, \"my_module\" is using node-pre-gyp to\n// prebuild and install pre-built binaries. \"main_module\"\n// is using \"my_module\".\n//\n// \"bin/node-pre-gyp\" invokes Run() without a path. the\n// expectation is that the working directory is the package\n// root \"my_module\". this is true because in all cases npm is\n// executing a script in the context of \"my_module\".\n//\n// \"pre-binding.find()\" is executed by \"my_module\" but in the\n// context of \"main_module\". this is because \"main_module\" is\n// executing and requires \"my_module\" which is then executing\n// \"pre-binding.find()\" via \"node-pre-gyp.find()\", so the working\n// directory is that of \"main_module\".\n//\n// that's why \"find()\" must pass the path to package.json.\n//\nfunction Run(_ref) {\n  let {\n    package_json_path = './package.json',\n    argv\n  } = _ref;\n  this.package_json_path = package_json_path;\n  this.commands = {};\n  const self = this;\n  cli_commands.forEach(command => {\n    self.commands[command] = function (argvx, callback) {\n      log.verbose('command', command, argvx);\n      return require('./' + command)(self, argvx, callback);\n    };\n  });\n  this.parseArgv(argv);\n\n  // this is set to true after the binary.host property was set to\n  // either staging_host or production_host.\n  this.binaryHostSet = false;\n}\ninherits(Run, EE);\nexports.Run = Run;\nconst proto = Run.prototype;\n\n/**\n * Export the contents of the package.json.\n */\n\nproto.package = require('../package.json');\n\n/**\n * nopt configuration definitions\n */\n\nproto.configDefs = {\n  help: Boolean,\n  // everywhere\n  arch: String,\n  // 'configure'\n  debug: Boolean,\n  // 'build'\n  directory: String,\n  // bin\n  proxy: String,\n  // 'install'\n  loglevel: String // everywhere\n};\n\n/**\n * nopt shorthands\n */\n\nproto.shorthands = {\n  release: '--no-debug',\n  C: '--directory',\n  debug: '--debug',\n  j: '--jobs',\n  silent: '--loglevel=silent',\n  silly: '--loglevel=silly',\n  verbose: '--loglevel=verbose'\n};\n\n/**\n * expose the command aliases for the bin file to use.\n */\n\nproto.aliases = aliases;\n\n/**\n * Parses the given argv array and sets the 'opts', 'argv',\n * 'command', and 'package_json' properties.\n */\n\nproto.parseArgv = function parseOpts(argv) {\n  this.opts = nopt(this.configDefs, this.shorthands, argv);\n  this.argv = this.opts.argv.remain.slice();\n  const commands = this.todo = [];\n\n  // create a copy of the argv array with aliases mapped\n  argv = this.argv.map(arg => {\n    // is this an alias?\n    if (arg in this.aliases) {\n      arg = this.aliases[arg];\n    }\n    return arg;\n  });\n\n  // process the mapped args into \"command\" objects (\"name\" and \"args\" props)\n  argv.slice().forEach(arg => {\n    if (arg in this.commands) {\n      const args = argv.splice(0, argv.indexOf(arg));\n      argv.shift();\n      if (commands.length > 0) {\n        commands[commands.length - 1].args = args;\n      }\n      commands.push({\n        name: arg,\n        args: []\n      });\n    }\n  });\n  if (commands.length > 0) {\n    commands[commands.length - 1].args = argv.splice(0);\n  }\n\n  // if a directory was specified package.json is assumed to be relative\n  // to it.\n  let package_json_path = this.package_json_path;\n  if (this.opts.directory) {\n    package_json_path = path.join(this.opts.directory, package_json_path);\n  }\n  this.package_json = JSON.parse(fs.readFileSync(package_json_path));\n\n  // expand commands entries for multiple napi builds\n  this.todo = napi.expand_commands(this.package_json, this.opts, commands);\n\n  // support for inheriting config env variables from npm\n  const npm_config_prefix = 'npm_config_';\n  Object.keys(process.env).forEach(name => {\n    if (name.indexOf(npm_config_prefix) !== 0) return;\n    const val = process.env[name];\n    if (name === npm_config_prefix + 'loglevel') {\n      log.level = val;\n    } else {\n      // add the user-defined options to the config\n      name = name.substring(npm_config_prefix.length);\n      // avoid npm argv clobber already present args\n      // which avoids problem of 'npm test' calling\n      // script that runs unique npm install commands\n      if (name === 'argv') {\n        if (this.opts.argv && this.opts.argv.remain && this.opts.argv.remain.length) {\n          // do nothing\n        } else {\n          this.opts[name] = val;\n        }\n      } else {\n        this.opts[name] = val;\n      }\n    }\n  });\n  if (this.opts.loglevel) {\n    log.level = this.opts.loglevel;\n  }\n  log.resume();\n};\n\n/**\n * allow the binary.host property to be set at execution time.\n *\n * for this to take effect requires all the following to be true.\n * - binary is a property in package.json\n * - binary.host is falsey\n * - binary.staging_host is not empty\n * - binary.production_host is not empty\n *\n * if any of the previous checks fail then the function returns an empty string\n * and makes no changes to package.json's binary property.\n *\n *\n * if command is \"publish\" then the default is set to \"binary.staging_host\"\n * if command is not \"publish\" the the default is set to \"binary.production_host\"\n *\n * if the command-line option '--s3_host' is set to \"staging\" or \"production\" then\n * \"binary.host\" is set to the specified \"staging_host\" or \"production_host\". if\n * '--s3_host' is any other value an exception is thrown.\n *\n * if '--s3_host' is not present then \"binary.host\" is set to the default as above.\n *\n * this strategy was chosen so that any command other than \"publish\" uses \"production\"\n * as the default without requiring any command-line options but that \"publish\" requires\n * '--s3_host production_host' to be specified in order to *really* publish. publishing\n * to staging can be done freely without worrying about disturbing any production releases.\n */\nproto.setBinaryHostProperty = function (command) {\n  if (this.binaryHostSet) {\n    return this.package_json.binary.host;\n  }\n  const p = this.package_json;\n  // don't set anything if host is present. it must be left blank to trigger this.\n  if (!p || !p.binary || p.binary.host) {\n    return '';\n  }\n  // and both staging and production must be present. errors will be reported later.\n  if (!p.binary.staging_host || !p.binary.production_host) {\n    return '';\n  }\n  let target = 'production_host';\n  if (command === 'publish') {\n    target = 'staging_host';\n  }\n  // the environment variable has priority over the default or the command line. if\n  // either the env var or the command line option are invalid throw an error.\n  const npg_s3_host = process.env.node_pre_gyp_s3_host;\n  if (npg_s3_host === 'staging' || npg_s3_host === 'production') {\n    target = `${npg_s3_host}_host`;\n  } else if (this.opts['s3_host'] === 'staging' || this.opts['s3_host'] === 'production') {\n    target = `${this.opts['s3_host']}_host`;\n  } else if (this.opts['s3_host'] || npg_s3_host) {\n    throw new Error(`invalid s3_host ${this.opts['s3_host'] || npg_s3_host}`);\n  }\n  p.binary.host = p.binary[target];\n  this.binaryHostSet = true;\n  return p.binary.host;\n};\n\n/**\n * Returns the usage instructions for node-pre-gyp.\n */\n\nproto.usage = function usage() {\n  const str = ['', '  Usage: node-pre-gyp <command> [options]', '', '  where <command> is one of:', cli_commands.map(c => {\n    return '    - ' + c + ' - ' + require('./' + c).usage;\n  }).join('\\n'), '', 'node-pre-gyp@' + this.version + '  ' + path.resolve(__dirname, '..'), 'node@' + process.versions.node].join('\\n');\n  return str;\n};\n\n/**\n * Version number getter.\n */\n\nObject.defineProperty(proto, 'version', {\n  get: function () {\n    return this.package.version;\n  },\n  enumerable: true\n});","map":{"version":3,"names":["module","exports","mockS3Http","require","get_mockS3Http","mocking","fs","path","nopt","log","disableProgress","napi","EE","EventEmitter","inherits","cli_commands","aliases","heading","warn","process","env","node_pre_gyp_mock_s3","find","Run","_ref","package_json_path","argv","commands","self","forEach","command","argvx","callback","verbose","parseArgv","binaryHostSet","proto","prototype","package","configDefs","help","Boolean","arch","String","debug","directory","proxy","loglevel","shorthands","release","C","j","silent","silly","parseOpts","opts","remain","slice","todo","map","arg","args","splice","indexOf","shift","length","push","name","join","package_json","JSON","parse","readFileSync","expand_commands","npm_config_prefix","Object","keys","val","level","substring","resume","setBinaryHostProperty","binary","host","p","staging_host","production_host","target","npg_s3_host","node_pre_gyp_s3_host","Error","usage","str","c","version","resolve","__dirname","versions","node","defineProperty","get","enumerable"],"sources":["C:/Users/ACER/node_modules/@mapbox/node-pre-gyp/lib/node-pre-gyp.js"],"sourcesContent":["'use strict';\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports;\n\n/**\n * Module dependencies.\n */\n\n// load mocking control function for accessing s3 via https. the function is a noop always returning\n// false if not mocking.\nexports.mockS3Http = require('./util/s3_setup').get_mockS3Http();\nexports.mockS3Http('on');\nconst mocking = exports.mockS3Http('get');\n\n\nconst fs = require('fs');\nconst path = require('path');\nconst nopt = require('nopt');\nconst log = require('npmlog');\nlog.disableProgress();\nconst napi = require('./util/napi.js');\n\nconst EE = require('events').EventEmitter;\nconst inherits = require('util').inherits;\nconst cli_commands = [\n  'clean',\n  'install',\n  'reinstall',\n  'build',\n  'rebuild',\n  'package',\n  'testpackage',\n  'publish',\n  'unpublish',\n  'info',\n  'testbinary',\n  'reveal',\n  'configure'\n];\nconst aliases = {};\n\n// differentiate node-pre-gyp's logs from npm's\nlog.heading = 'node-pre-gyp';\n\nif (mocking) {\n  log.warn(`mocking s3 to ${process.env.node_pre_gyp_mock_s3}`);\n}\n\nexports.find = require('./pre-binding').find;\n\n//\n// in the following, \"my_module\" is using node-pre-gyp to\n// prebuild and install pre-built binaries. \"main_module\"\n// is using \"my_module\".\n//\n// \"bin/node-pre-gyp\" invokes Run() without a path. the\n// expectation is that the working directory is the package\n// root \"my_module\". this is true because in all cases npm is\n// executing a script in the context of \"my_module\".\n//\n// \"pre-binding.find()\" is executed by \"my_module\" but in the\n// context of \"main_module\". this is because \"main_module\" is\n// executing and requires \"my_module\" which is then executing\n// \"pre-binding.find()\" via \"node-pre-gyp.find()\", so the working\n// directory is that of \"main_module\".\n//\n// that's why \"find()\" must pass the path to package.json.\n//\nfunction Run({ package_json_path = './package.json', argv }) {\n  this.package_json_path = package_json_path;\n  this.commands = {};\n\n  const self = this;\n  cli_commands.forEach((command) => {\n    self.commands[command] = function(argvx, callback) {\n      log.verbose('command', command, argvx);\n      return require('./' + command)(self, argvx, callback);\n    };\n  });\n\n  this.parseArgv(argv);\n\n  // this is set to true after the binary.host property was set to\n  // either staging_host or production_host.\n  this.binaryHostSet = false;\n}\ninherits(Run, EE);\nexports.Run = Run;\nconst proto = Run.prototype;\n\n/**\n * Export the contents of the package.json.\n */\n\nproto.package = require('../package.json');\n\n/**\n * nopt configuration definitions\n */\n\nproto.configDefs = {\n  help: Boolean,     // everywhere\n  arch: String,      // 'configure'\n  debug: Boolean,    // 'build'\n  directory: String, // bin\n  proxy: String,     // 'install'\n  loglevel: String  // everywhere\n};\n\n/**\n * nopt shorthands\n */\n\nproto.shorthands = {\n  release: '--no-debug',\n  C: '--directory',\n  debug: '--debug',\n  j: '--jobs',\n  silent: '--loglevel=silent',\n  silly: '--loglevel=silly',\n  verbose: '--loglevel=verbose'\n};\n\n/**\n * expose the command aliases for the bin file to use.\n */\n\nproto.aliases = aliases;\n\n/**\n * Parses the given argv array and sets the 'opts', 'argv',\n * 'command', and 'package_json' properties.\n */\n\nproto.parseArgv = function parseOpts(argv) {\n  this.opts = nopt(this.configDefs, this.shorthands, argv);\n  this.argv = this.opts.argv.remain.slice();\n  const commands = this.todo = [];\n\n  // create a copy of the argv array with aliases mapped\n  argv = this.argv.map((arg) => {\n    // is this an alias?\n    if (arg in this.aliases) {\n      arg = this.aliases[arg];\n    }\n    return arg;\n  });\n\n  // process the mapped args into \"command\" objects (\"name\" and \"args\" props)\n  argv.slice().forEach((arg) => {\n    if (arg in this.commands) {\n      const args = argv.splice(0, argv.indexOf(arg));\n      argv.shift();\n      if (commands.length > 0) {\n        commands[commands.length - 1].args = args;\n      }\n      commands.push({ name: arg, args: [] });\n    }\n  });\n  if (commands.length > 0) {\n    commands[commands.length - 1].args = argv.splice(0);\n  }\n\n\n  // if a directory was specified package.json is assumed to be relative\n  // to it.\n  let package_json_path = this.package_json_path;\n  if (this.opts.directory) {\n    package_json_path = path.join(this.opts.directory, package_json_path);\n  }\n\n  this.package_json = JSON.parse(fs.readFileSync(package_json_path));\n\n  // expand commands entries for multiple napi builds\n  this.todo = napi.expand_commands(this.package_json, this.opts, commands);\n\n  // support for inheriting config env variables from npm\n  const npm_config_prefix = 'npm_config_';\n  Object.keys(process.env).forEach((name) => {\n    if (name.indexOf(npm_config_prefix) !== 0) return;\n    const val = process.env[name];\n    if (name === npm_config_prefix + 'loglevel') {\n      log.level = val;\n    } else {\n      // add the user-defined options to the config\n      name = name.substring(npm_config_prefix.length);\n      // avoid npm argv clobber already present args\n      // which avoids problem of 'npm test' calling\n      // script that runs unique npm install commands\n      if (name === 'argv') {\n        if (this.opts.argv &&\n             this.opts.argv.remain &&\n             this.opts.argv.remain.length) {\n          // do nothing\n        } else {\n          this.opts[name] = val;\n        }\n      } else {\n        this.opts[name] = val;\n      }\n    }\n  });\n\n  if (this.opts.loglevel) {\n    log.level = this.opts.loglevel;\n  }\n  log.resume();\n};\n\n/**\n * allow the binary.host property to be set at execution time.\n *\n * for this to take effect requires all the following to be true.\n * - binary is a property in package.json\n * - binary.host is falsey\n * - binary.staging_host is not empty\n * - binary.production_host is not empty\n *\n * if any of the previous checks fail then the function returns an empty string\n * and makes no changes to package.json's binary property.\n *\n *\n * if command is \"publish\" then the default is set to \"binary.staging_host\"\n * if command is not \"publish\" the the default is set to \"binary.production_host\"\n *\n * if the command-line option '--s3_host' is set to \"staging\" or \"production\" then\n * \"binary.host\" is set to the specified \"staging_host\" or \"production_host\". if\n * '--s3_host' is any other value an exception is thrown.\n *\n * if '--s3_host' is not present then \"binary.host\" is set to the default as above.\n *\n * this strategy was chosen so that any command other than \"publish\" uses \"production\"\n * as the default without requiring any command-line options but that \"publish\" requires\n * '--s3_host production_host' to be specified in order to *really* publish. publishing\n * to staging can be done freely without worrying about disturbing any production releases.\n */\nproto.setBinaryHostProperty = function(command) {\n  if (this.binaryHostSet) {\n    return this.package_json.binary.host;\n  }\n  const p = this.package_json;\n  // don't set anything if host is present. it must be left blank to trigger this.\n  if (!p || !p.binary || p.binary.host) {\n    return '';\n  }\n  // and both staging and production must be present. errors will be reported later.\n  if (!p.binary.staging_host || !p.binary.production_host) {\n    return '';\n  }\n  let target = 'production_host';\n  if (command === 'publish') {\n    target = 'staging_host';\n  }\n  // the environment variable has priority over the default or the command line. if\n  // either the env var or the command line option are invalid throw an error.\n  const npg_s3_host = process.env.node_pre_gyp_s3_host;\n  if (npg_s3_host === 'staging' || npg_s3_host === 'production') {\n    target = `${npg_s3_host}_host`;\n  } else if (this.opts['s3_host'] === 'staging' || this.opts['s3_host'] === 'production') {\n    target = `${this.opts['s3_host']}_host`;\n  } else if (this.opts['s3_host'] || npg_s3_host) {\n    throw new Error(`invalid s3_host ${this.opts['s3_host'] || npg_s3_host}`);\n  }\n\n  p.binary.host = p.binary[target];\n  this.binaryHostSet = true;\n\n  return p.binary.host;\n};\n\n/**\n * Returns the usage instructions for node-pre-gyp.\n */\n\nproto.usage = function usage() {\n  const str = [\n    '',\n    '  Usage: node-pre-gyp <command> [options]',\n    '',\n    '  where <command> is one of:',\n    cli_commands.map((c) => {\n      return '    - ' + c + ' - ' + require('./' + c).usage;\n    }).join('\\n'),\n    '',\n    'node-pre-gyp@' + this.version + '  ' + path.resolve(__dirname, '..'),\n    'node@' + process.versions.node\n  ].join('\\n');\n  return str;\n};\n\n/**\n * Version number getter.\n */\n\nObject.defineProperty(proto, 'version', {\n  get: function() {\n    return this.package.version;\n  },\n  enumerable: true\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}