{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.splitVConfig = {\n  kernelName: tfjs_1.SplitV,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var x = args.inputs.x;\n    var backend = args.backend;\n    var _a = args.attrs,\n      numOrSizeSplits = _a.numOrSizeSplits,\n      axis = _a.axis;\n    var $axis = tfjs_1.util.parseAxisParam(axis, x.shape)[0];\n    var splitSizes = tfjs_1.backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n    var opAttrs = [{\n      name: 'num_split',\n      type: backend.binding.TF_ATTR_INT,\n      value: splitSizes.length\n    }, nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x), {\n      name: 'Tlen',\n      type: backend.binding.TF_ATTR_TYPE,\n      value: backend.binding.TF_INT32\n    }];\n    var inputs = [x];\n    return tfjs_1.tidy(function () {\n      inputs.push(tfjs_1.tensor1d(splitSizes, 'int32'));\n      inputs.push(tfjs_1.scalar($axis, 'int32'));\n      return backend.executeMultipleOutputs(tfjs_1.SplitV, opAttrs, inputs, splitSizes.length);\n    });\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","splitVConfig","kernelName","SplitV","backendName","kernelFunc","args","x","inputs","backend","_a","attrs","numOrSizeSplits","axis","$axis","util","parseAxisParam","shape","splitSizes","backend_util","prepareSplitSize","opAttrs","name","type","binding","TF_ATTR_INT","length","createTensorsTypeOpAttr","TF_ATTR_TYPE","TF_INT32","tidy","push","tensor1d","scalar","executeMultipleOutputs"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/kernels/SplitV.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.splitVConfig = {\n    kernelName: tfjs_1.SplitV,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var x = args.inputs.x;\n        var backend = args.backend;\n        var _a = args.attrs, numOrSizeSplits = _a.numOrSizeSplits, axis = _a.axis;\n        var $axis = tfjs_1.util.parseAxisParam(axis, x.shape)[0];\n        var splitSizes = tfjs_1.backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n        var opAttrs = [\n            {\n                name: 'num_split',\n                type: backend.binding.TF_ATTR_INT,\n                value: splitSizes.length\n            },\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x), {\n                name: 'Tlen',\n                type: backend.binding.TF_ATTR_TYPE,\n                value: backend.binding.TF_INT32\n            }\n        ];\n        var inputs = [x];\n        return tfjs_1.tidy(function () {\n            inputs.push(tfjs_1.tensor1d(splitSizes, 'int32'));\n            inputs.push(tfjs_1.scalar($axis, 'int32'));\n            return backend.executeMultipleOutputs(tfjs_1.SplitV, opAttrs, inputs, splitSizes.length);\n        });\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACjEH,OAAO,CAACK,YAAY,GAAG;EACnBC,UAAU,EAAEJ,MAAM,CAACK,MAAM;EACzBC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,SAAAA,CAAUC,IAAI,EAAE;IACxB,IAAIC,CAAC,GAAGD,IAAI,CAACE,MAAM,CAACD,CAAC;IACrB,IAAIE,OAAO,GAAGH,IAAI,CAACG,OAAO;IAC1B,IAAIC,EAAE,GAAGJ,IAAI,CAACK,KAAK;MAAEC,eAAe,GAAGF,EAAE,CAACE,eAAe;MAAEC,IAAI,GAAGH,EAAE,CAACG,IAAI;IACzE,IAAIC,KAAK,GAAGhB,MAAM,CAACiB,IAAI,CAACC,cAAc,CAACH,IAAI,EAAEN,CAAC,CAACU,KAAK,CAAC,CAAC,CAAC,CAAC;IACxD,IAAIC,UAAU,GAAGpB,MAAM,CAACqB,YAAY,CAACC,gBAAgB,CAACb,CAAC,EAAEK,eAAe,EAAEE,KAAK,CAAC;IAChF,IAAIO,OAAO,GAAG,CACV;MACIC,IAAI,EAAE,WAAW;MACjBC,IAAI,EAAEd,OAAO,CAACe,OAAO,CAACC,WAAW;MACjC5B,KAAK,EAAEqB,UAAU,CAACQ;IACtB,CAAC,EACD1B,uBAAuB,CAAC2B,uBAAuB,CAAC,GAAG,EAAEpB,CAAC,CAAC,EAAE;MACrDe,IAAI,EAAE,MAAM;MACZC,IAAI,EAAEd,OAAO,CAACe,OAAO,CAACI,YAAY;MAClC/B,KAAK,EAAEY,OAAO,CAACe,OAAO,CAACK;IAC3B,CAAC,CACJ;IACD,IAAIrB,MAAM,GAAG,CAACD,CAAC,CAAC;IAChB,OAAOT,MAAM,CAACgC,IAAI,CAAC,YAAY;MAC3BtB,MAAM,CAACuB,IAAI,CAACjC,MAAM,CAACkC,QAAQ,CAACd,UAAU,EAAE,OAAO,CAAC,CAAC;MACjDV,MAAM,CAACuB,IAAI,CAACjC,MAAM,CAACmC,MAAM,CAACnB,KAAK,EAAE,OAAO,CAAC,CAAC;MAC1C,OAAOL,OAAO,CAACyB,sBAAsB,CAACpC,MAAM,CAACK,MAAM,EAAEkB,OAAO,EAAEb,MAAM,EAAEU,UAAU,CAACQ,MAAM,CAAC;IAC5F,CAAC,CAAC;EACN;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}