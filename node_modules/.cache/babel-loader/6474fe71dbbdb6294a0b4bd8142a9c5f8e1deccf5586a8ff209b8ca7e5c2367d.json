{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.mirrorPadConfig = {\n  kernelName: tfjs_1.MirrorPad,\n  backendName: 'tensorflow',\n  kernelFunc: function (_a) {\n    var inputs = _a.inputs,\n      backend = _a.backend,\n      attrs = _a.attrs;\n    var x = inputs.x;\n    var _b = attrs,\n      paddings = _b.paddings,\n      mode = _b.mode;\n    var nodeBackend = backend;\n    var paddingsTensor = tfjs_1.tensor2d(paddings, [paddings.length, 2], 'int32');\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tpaddings', paddingsTensor.dtype), {\n      name: 'mode',\n      type: nodeBackend.binding.TF_ATTR_STRING,\n      value: mode.toUpperCase()\n    }];\n    var output = nodeBackend.executeSingleOutput('MirrorPad', opAttrs, [x, paddingsTensor]);\n    paddingsTensor.dispose();\n    return output;\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","mirrorPadConfig","kernelName","MirrorPad","backendName","kernelFunc","_a","inputs","backend","attrs","x","_b","paddings","mode","nodeBackend","paddingsTensor","tensor2d","length","opAttrs","createTensorsTypeOpAttr","dtype","name","type","binding","TF_ATTR_STRING","toUpperCase","output","executeSingleOutput","dispose"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/kernels/MirrorPad.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.mirrorPadConfig = {\n    kernelName: tfjs_1.MirrorPad,\n    backendName: 'tensorflow',\n    kernelFunc: function (_a) {\n        var inputs = _a.inputs, backend = _a.backend, attrs = _a.attrs;\n        var x = inputs.x;\n        var _b = attrs, paddings = _b.paddings, mode = _b.mode;\n        var nodeBackend = backend;\n        var paddingsTensor = tfjs_1.tensor2d(paddings, [paddings.length, 2], 'int32');\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tpaddings', paddingsTensor.dtype), {\n                name: 'mode',\n                type: nodeBackend.binding.TF_ATTR_STRING,\n                value: mode.toUpperCase()\n            }\n        ];\n        var output = nodeBackend.executeSingleOutput('MirrorPad', opAttrs, [x, paddingsTensor]);\n        paddingsTensor.dispose();\n        return output;\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACjEH,OAAO,CAACK,eAAe,GAAG;EACtBC,UAAU,EAAEJ,MAAM,CAACK,SAAS;EAC5BC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,SAAAA,CAAUC,EAAE,EAAE;IACtB,IAAIC,MAAM,GAAGD,EAAE,CAACC,MAAM;MAAEC,OAAO,GAAGF,EAAE,CAACE,OAAO;MAAEC,KAAK,GAAGH,EAAE,CAACG,KAAK;IAC9D,IAAIC,CAAC,GAAGH,MAAM,CAACG,CAAC;IAChB,IAAIC,EAAE,GAAGF,KAAK;MAAEG,QAAQ,GAAGD,EAAE,CAACC,QAAQ;MAAEC,IAAI,GAAGF,EAAE,CAACE,IAAI;IACtD,IAAIC,WAAW,GAAGN,OAAO;IACzB,IAAIO,cAAc,GAAGjB,MAAM,CAACkB,QAAQ,CAACJ,QAAQ,EAAE,CAACA,QAAQ,CAACK,MAAM,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC;IAC7E,IAAIC,OAAO,GAAG,CACVlB,uBAAuB,CAACmB,uBAAuB,CAAC,GAAG,EAAET,CAAC,CAACU,KAAK,CAAC,EAC7DpB,uBAAuB,CAACmB,uBAAuB,CAAC,WAAW,EAAEJ,cAAc,CAACK,KAAK,CAAC,EAAE;MAChFC,IAAI,EAAE,MAAM;MACZC,IAAI,EAAER,WAAW,CAACS,OAAO,CAACC,cAAc;MACxC3B,KAAK,EAAEgB,IAAI,CAACY,WAAW,CAAC;IAC5B,CAAC,CACJ;IACD,IAAIC,MAAM,GAAGZ,WAAW,CAACa,mBAAmB,CAAC,WAAW,EAAET,OAAO,EAAE,CAACR,CAAC,EAAEK,cAAc,CAAC,CAAC;IACvFA,cAAc,CAACa,OAAO,CAAC,CAAC;IACxB,OAAOF,MAAM;EACjB;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}