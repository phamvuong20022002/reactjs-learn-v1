{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.resizeNearestNeighborConfig = {\n  kernelName: tfjs_1.ResizeNearestNeighbor,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var images = args.inputs.images;\n    var backend = args.backend;\n    var _a = args.attrs,\n      alignCorners = _a.alignCorners,\n      halfPixelCenters = _a.halfPixelCenters,\n      size = _a.size;\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', images.dtype), {\n      name: 'align_corners',\n      type: backend.binding.TF_ATTR_BOOL,\n      value: alignCorners\n    }, {\n      name: 'half_pixel_centers',\n      type: backend.binding.TF_ATTR_BOOL,\n      value: halfPixelCenters\n    }];\n    var newHeight = size[0],\n      newWidth = size[1];\n    var sizeTensor = tfjs_1.tensor1d([newHeight, newWidth], 'int32');\n    var res = backend.executeSingleOutput(tfjs_1.ResizeNearestNeighbor, opAttrs, [images, sizeTensor]);\n    sizeTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","resizeNearestNeighborConfig","kernelName","ResizeNearestNeighbor","backendName","kernelFunc","args","images","inputs","backend","_a","attrs","alignCorners","halfPixelCenters","size","opAttrs","createTensorsTypeOpAttr","dtype","name","type","binding","TF_ATTR_BOOL","newHeight","newWidth","sizeTensor","tensor1d","res","executeSingleOutput","dispose"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/kernels/ResizeNearestNeighbor.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.resizeNearestNeighborConfig = {\n    kernelName: tfjs_1.ResizeNearestNeighbor,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var images = args.inputs.images;\n        var backend = args.backend;\n        var _a = args.attrs, alignCorners = _a.alignCorners, halfPixelCenters = _a.halfPixelCenters, size = _a.size;\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', images.dtype),\n            {\n                name: 'align_corners',\n                type: backend.binding.TF_ATTR_BOOL,\n                value: alignCorners\n            },\n            {\n                name: 'half_pixel_centers',\n                type: backend.binding.TF_ATTR_BOOL,\n                value: halfPixelCenters\n            },\n        ];\n        var newHeight = size[0], newWidth = size[1];\n        var sizeTensor = tfjs_1.tensor1d([newHeight, newWidth], 'int32');\n        var res = backend.executeSingleOutput(tfjs_1.ResizeNearestNeighbor, opAttrs, [images, sizeTensor]);\n        sizeTensor.dispose();\n        return res;\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACjEH,OAAO,CAACK,2BAA2B,GAAG;EAClCC,UAAU,EAAEJ,MAAM,CAACK,qBAAqB;EACxCC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,SAAAA,CAAUC,IAAI,EAAE;IACxB,IAAIC,MAAM,GAAGD,IAAI,CAACE,MAAM,CAACD,MAAM;IAC/B,IAAIE,OAAO,GAAGH,IAAI,CAACG,OAAO;IAC1B,IAAIC,EAAE,GAAGJ,IAAI,CAACK,KAAK;MAAEC,YAAY,GAAGF,EAAE,CAACE,YAAY;MAAEC,gBAAgB,GAAGH,EAAE,CAACG,gBAAgB;MAAEC,IAAI,GAAGJ,EAAE,CAACI,IAAI;IAC3G,IAAIC,OAAO,GAAG,CACVf,uBAAuB,CAACgB,uBAAuB,CAAC,GAAG,EAAET,MAAM,CAACU,KAAK,CAAC,EAClE;MACIC,IAAI,EAAE,eAAe;MACrBC,IAAI,EAAEV,OAAO,CAACW,OAAO,CAACC,YAAY;MAClCxB,KAAK,EAAEe;IACX,CAAC,EACD;MACIM,IAAI,EAAE,oBAAoB;MAC1BC,IAAI,EAAEV,OAAO,CAACW,OAAO,CAACC,YAAY;MAClCxB,KAAK,EAAEgB;IACX,CAAC,CACJ;IACD,IAAIS,SAAS,GAAGR,IAAI,CAAC,CAAC,CAAC;MAAES,QAAQ,GAAGT,IAAI,CAAC,CAAC,CAAC;IAC3C,IAAIU,UAAU,GAAG1B,MAAM,CAAC2B,QAAQ,CAAC,CAACH,SAAS,EAAEC,QAAQ,CAAC,EAAE,OAAO,CAAC;IAChE,IAAIG,GAAG,GAAGjB,OAAO,CAACkB,mBAAmB,CAAC7B,MAAM,CAACK,qBAAqB,EAAEY,OAAO,EAAE,CAACR,MAAM,EAAEiB,UAAU,CAAC,CAAC;IAClGA,UAAU,CAACI,OAAO,CAAC,CAAC;IACpB,OAAOF,GAAG;EACd;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}