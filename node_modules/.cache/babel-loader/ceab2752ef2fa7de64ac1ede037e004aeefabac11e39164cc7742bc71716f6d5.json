{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar util_1 = require(\"util\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.topKConfig = {\n  kernelName: tfjs_1.TopK,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var x = args.inputs.x;\n    var backend = args.backend;\n    var _a = args.attrs,\n      k = _a.k,\n      sorted = _a.sorted;\n    var kCount = util_1.isNullOrUndefined(k) ? 1 : k;\n    var isSorted = util_1.isNullOrUndefined(sorted) ? true : sorted;\n    var opAttrs = [{\n      name: 'sorted',\n      type: backend.binding.TF_ATTR_BOOL,\n      value: isSorted\n    }, nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype)];\n    var kTensor = tfjs_1.scalar(kCount, 'int32');\n    // 'TopKV2' has two-hard coded output attributes:\n    // TODO(yassogba) consider renamine constant in kernel names;\n    var res = backend.executeMultipleOutputs('TopKV2', opAttrs, [x, kTensor], 2);\n    kTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","util_1","nodejs_kernel_backend_1","topKConfig","kernelName","TopK","backendName","kernelFunc","args","x","inputs","backend","_a","attrs","k","sorted","kCount","isNullOrUndefined","isSorted","opAttrs","name","type","binding","TF_ATTR_BOOL","createTensorsTypeOpAttr","dtype","kTensor","scalar","res","executeMultipleOutputs","dispose"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/kernels/TopK.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar util_1 = require(\"util\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.topKConfig = {\n    kernelName: tfjs_1.TopK,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var x = args.inputs.x;\n        var backend = args.backend;\n        var _a = args.attrs, k = _a.k, sorted = _a.sorted;\n        var kCount = util_1.isNullOrUndefined(k) ? 1 : k;\n        var isSorted = util_1.isNullOrUndefined(sorted) ? true : sorted;\n        var opAttrs = [\n            { name: 'sorted', type: backend.binding.TF_ATTR_BOOL, value: isSorted },\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype),\n        ];\n        var kTensor = tfjs_1.scalar(kCount, 'int32');\n        // 'TopKV2' has two-hard coded output attributes:\n        // TODO(yassogba) consider renamine constant in kernel names;\n        var res = backend.executeMultipleOutputs('TopKV2', opAttrs, [x, kTensor], 2);\n        kTensor.dispose();\n        return res;\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,MAAM,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,IAAIE,uBAAuB,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AACjEH,OAAO,CAACM,UAAU,GAAG;EACjBC,UAAU,EAAEL,MAAM,CAACM,IAAI;EACvBC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,SAAAA,CAAUC,IAAI,EAAE;IACxB,IAAIC,CAAC,GAAGD,IAAI,CAACE,MAAM,CAACD,CAAC;IACrB,IAAIE,OAAO,GAAGH,IAAI,CAACG,OAAO;IAC1B,IAAIC,EAAE,GAAGJ,IAAI,CAACK,KAAK;MAAEC,CAAC,GAAGF,EAAE,CAACE,CAAC;MAAEC,MAAM,GAAGH,EAAE,CAACG,MAAM;IACjD,IAAIC,MAAM,GAAGf,MAAM,CAACgB,iBAAiB,CAACH,CAAC,CAAC,GAAG,CAAC,GAAGA,CAAC;IAChD,IAAII,QAAQ,GAAGjB,MAAM,CAACgB,iBAAiB,CAACF,MAAM,CAAC,GAAG,IAAI,GAAGA,MAAM;IAC/D,IAAII,OAAO,GAAG,CACV;MAAEC,IAAI,EAAE,QAAQ;MAAEC,IAAI,EAAEV,OAAO,CAACW,OAAO,CAACC,YAAY;MAAEzB,KAAK,EAAEoB;IAAS,CAAC,EACvEhB,uBAAuB,CAACsB,uBAAuB,CAAC,GAAG,EAAEf,CAAC,CAACgB,KAAK,CAAC,CAChE;IACD,IAAIC,OAAO,GAAG3B,MAAM,CAAC4B,MAAM,CAACX,MAAM,EAAE,OAAO,CAAC;IAC5C;IACA;IACA,IAAIY,GAAG,GAAGjB,OAAO,CAACkB,sBAAsB,CAAC,QAAQ,EAAEV,OAAO,EAAE,CAACV,CAAC,EAAEiB,OAAO,CAAC,EAAE,CAAC,CAAC;IAC5EA,OAAO,CAACI,OAAO,CAAC,CAAC;IACjB,OAAOF,GAAG;EACd;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}