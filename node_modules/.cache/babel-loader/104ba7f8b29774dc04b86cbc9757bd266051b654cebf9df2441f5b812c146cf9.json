{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.fusedBatchNormConfig = {\n  kernelName: tfjs_1.FusedBatchNorm,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n      x = _a.x,\n      mean = _a.mean,\n      variance = _a.variance;\n    var _b = args.inputs,\n      scale = _b.scale,\n      offset = _b.offset;\n    var backend = args.backend;\n    var varianceEpsilon = args.attrs.varianceEpsilon;\n    return tfjs_1.tidy(function () {\n      if (mean.rank > 1) {\n        // Fused batch norm doesn't work with high-dim mean/var/scale/offset.\n        var inv = tfjs_1.rsqrt(tfjs_1.add(variance, tfjs_1.scalar(varianceEpsilon)));\n        if (scale != null) {\n          inv = tfjs_1.mul(inv, scale);\n        }\n        var xNorm = tfjs_1.mul(tfjs_1.sub(x, mean), inv);\n        return offset != null ? tfjs_1.add(xNorm, offset) : xNorm;\n      }\n      var dataFormat = 'NHWC';\n      var depth = x.shape[3];\n      var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype), {\n        name: 'epsilon',\n        type: backend.binding.TF_ATTR_FLOAT,\n        value: varianceEpsilon\n      }, {\n        name: 'data_format',\n        type: backend.binding.TF_ATTR_STRING,\n        value: dataFormat\n      }, {\n        name: 'is_training',\n        type: backend.binding.TF_ATTR_BOOL,\n        value: false\n      }];\n      var numOutputs = 5;\n      if (scale == null) {\n        scale = tfjs_1.fill([depth], 1);\n      }\n      if (offset == null) {\n        offset = tfjs_1.fill([depth], 0);\n      }\n      return backend.executeMultipleOutputs(tfjs_1.FusedBatchNorm, opAttrs, [x, scale, offset, mean, variance], numOutputs)[0];\n    });\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","fusedBatchNormConfig","kernelName","FusedBatchNorm","backendName","kernelFunc","args","_a","inputs","x","mean","variance","_b","scale","offset","backend","varianceEpsilon","attrs","tidy","rank","inv","rsqrt","add","scalar","mul","xNorm","sub","dataFormat","depth","shape","opAttrs","createTensorsTypeOpAttr","dtype","name","type","binding","TF_ATTR_FLOAT","TF_ATTR_STRING","TF_ATTR_BOOL","numOutputs","fill","executeMultipleOutputs"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/kernels/FusedBatchNorm.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.fusedBatchNormConfig = {\n    kernelName: tfjs_1.FusedBatchNorm,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, x = _a.x, mean = _a.mean, variance = _a.variance;\n        var _b = args.inputs, scale = _b.scale, offset = _b.offset;\n        var backend = args.backend;\n        var varianceEpsilon = args.attrs.varianceEpsilon;\n        return tfjs_1.tidy(function () {\n            if (mean.rank > 1) {\n                // Fused batch norm doesn't work with high-dim mean/var/scale/offset.\n                var inv = tfjs_1.rsqrt(tfjs_1.add(variance, tfjs_1.scalar(varianceEpsilon)));\n                if (scale != null) {\n                    inv = tfjs_1.mul(inv, scale);\n                }\n                var xNorm = tfjs_1.mul(tfjs_1.sub(x, mean), inv);\n                return offset != null ? tfjs_1.add(xNorm, offset) : xNorm;\n            }\n            var dataFormat = 'NHWC';\n            var depth = x.shape[3];\n            var opAttrs = [\n                nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype),\n                {\n                    name: 'epsilon',\n                    type: backend.binding.TF_ATTR_FLOAT,\n                    value: varianceEpsilon\n                },\n                {\n                    name: 'data_format',\n                    type: backend.binding.TF_ATTR_STRING,\n                    value: dataFormat\n                },\n                { name: 'is_training', type: backend.binding.TF_ATTR_BOOL, value: false },\n            ];\n            var numOutputs = 5;\n            if (scale == null) {\n                scale = tfjs_1.fill([depth], 1);\n            }\n            if (offset == null) {\n                offset = tfjs_1.fill([depth], 0);\n            }\n            return backend.executeMultipleOutputs(tfjs_1.FusedBatchNorm, opAttrs, [x, scale, offset, mean, variance], numOutputs)[0];\n        });\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}