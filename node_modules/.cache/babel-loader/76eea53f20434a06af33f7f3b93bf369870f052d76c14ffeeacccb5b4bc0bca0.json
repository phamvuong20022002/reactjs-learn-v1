{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.stridedSliceConfig = {\n  kernelName: tfjs_1.StridedSlice,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var x = args.inputs.x;\n    var backend = args.backend;\n    var _a = args.attrs,\n      beginMask = _a.beginMask,\n      endMask = _a.endMask,\n      ellipsisMask = _a.ellipsisMask,\n      newAxisMask = _a.newAxisMask,\n      shrinkAxisMask = _a.shrinkAxisMask;\n    var attrs = args.attrs;\n    // make a copy because it may be modified in-place further down.\n    var begin = attrs.begin.slice();\n    var end = attrs.end.slice();\n    var strides = attrs.strides;\n    return tfjs_1.tidy(function () {\n      var beginTensor = tfjs_1.tensor1d(begin, 'int32');\n      var endTensor = tfjs_1.tensor1d(end, 'int32');\n      var stridesTensor = tfjs_1.tensor1d(strides, 'int32');\n      var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('Index', 'int32'), {\n        name: 'begin_mask',\n        type: backend.binding.TF_ATTR_INT,\n        value: beginMask\n      }, {\n        name: 'end_mask',\n        type: backend.binding.TF_ATTR_INT,\n        value: endMask\n      }, {\n        name: 'ellipsis_mask',\n        type: backend.binding.TF_ATTR_INT,\n        value: ellipsisMask\n      }, {\n        name: 'new_axis_mask',\n        type: backend.binding.TF_ATTR_INT,\n        value: newAxisMask\n      }, {\n        name: 'shrink_axis_mask',\n        type: backend.binding.TF_ATTR_INT,\n        value: shrinkAxisMask\n      }];\n      return backend.executeSingleOutput(tfjs_1.StridedSlice, opAttrs, [x, beginTensor, endTensor, stridesTensor]);\n    });\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","stridedSliceConfig","kernelName","StridedSlice","backendName","kernelFunc","args","x","inputs","backend","_a","attrs","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","begin","slice","end","strides","tidy","beginTensor","tensor1d","endTensor","stridesTensor","opAttrs","createTensorsTypeOpAttr","dtype","name","type","binding","TF_ATTR_INT","executeSingleOutput"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/kernels/StridedSlice.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.stridedSliceConfig = {\n    kernelName: tfjs_1.StridedSlice,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var x = args.inputs.x;\n        var backend = args.backend;\n        var _a = args.attrs, beginMask = _a.beginMask, endMask = _a.endMask, ellipsisMask = _a.ellipsisMask, newAxisMask = _a.newAxisMask, shrinkAxisMask = _a.shrinkAxisMask;\n        var attrs = args.attrs;\n        // make a copy because it may be modified in-place further down.\n        var begin = attrs.begin.slice();\n        var end = attrs.end.slice();\n        var strides = attrs.strides;\n        return tfjs_1.tidy(function () {\n            var beginTensor = tfjs_1.tensor1d(begin, 'int32');\n            var endTensor = tfjs_1.tensor1d(end, 'int32');\n            var stridesTensor = tfjs_1.tensor1d(strides, 'int32');\n            var opAttrs = [\n                nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype),\n                nodejs_kernel_backend_1.createTensorsTypeOpAttr('Index', 'int32'), {\n                    name: 'begin_mask',\n                    type: backend.binding.TF_ATTR_INT,\n                    value: beginMask\n                },\n                { name: 'end_mask', type: backend.binding.TF_ATTR_INT, value: endMask }, {\n                    name: 'ellipsis_mask',\n                    type: backend.binding.TF_ATTR_INT,\n                    value: ellipsisMask\n                },\n                {\n                    name: 'new_axis_mask',\n                    type: backend.binding.TF_ATTR_INT,\n                    value: newAxisMask\n                },\n                {\n                    name: 'shrink_axis_mask',\n                    type: backend.binding.TF_ATTR_INT,\n                    value: shrinkAxisMask\n                }\n            ];\n            return backend.executeSingleOutput(tfjs_1.StridedSlice, opAttrs, [x, beginTensor, endTensor, stridesTensor]);\n        });\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACjEH,OAAO,CAACK,kBAAkB,GAAG;EACzBC,UAAU,EAAEJ,MAAM,CAACK,YAAY;EAC/BC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,SAAAA,CAAUC,IAAI,EAAE;IACxB,IAAIC,CAAC,GAAGD,IAAI,CAACE,MAAM,CAACD,CAAC;IACrB,IAAIE,OAAO,GAAGH,IAAI,CAACG,OAAO;IAC1B,IAAIC,EAAE,GAAGJ,IAAI,CAACK,KAAK;MAAEC,SAAS,GAAGF,EAAE,CAACE,SAAS;MAAEC,OAAO,GAAGH,EAAE,CAACG,OAAO;MAAEC,YAAY,GAAGJ,EAAE,CAACI,YAAY;MAAEC,WAAW,GAAGL,EAAE,CAACK,WAAW;MAAEC,cAAc,GAAGN,EAAE,CAACM,cAAc;IACrK,IAAIL,KAAK,GAAGL,IAAI,CAACK,KAAK;IACtB;IACA,IAAIM,KAAK,GAAGN,KAAK,CAACM,KAAK,CAACC,KAAK,CAAC,CAAC;IAC/B,IAAIC,GAAG,GAAGR,KAAK,CAACQ,GAAG,CAACD,KAAK,CAAC,CAAC;IAC3B,IAAIE,OAAO,GAAGT,KAAK,CAACS,OAAO;IAC3B,OAAOtB,MAAM,CAACuB,IAAI,CAAC,YAAY;MAC3B,IAAIC,WAAW,GAAGxB,MAAM,CAACyB,QAAQ,CAACN,KAAK,EAAE,OAAO,CAAC;MACjD,IAAIO,SAAS,GAAG1B,MAAM,CAACyB,QAAQ,CAACJ,GAAG,EAAE,OAAO,CAAC;MAC7C,IAAIM,aAAa,GAAG3B,MAAM,CAACyB,QAAQ,CAACH,OAAO,EAAE,OAAO,CAAC;MACrD,IAAIM,OAAO,GAAG,CACV1B,uBAAuB,CAAC2B,uBAAuB,CAAC,GAAG,EAAEpB,CAAC,CAACqB,KAAK,CAAC,EAC7D5B,uBAAuB,CAAC2B,uBAAuB,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE;QAC/DE,IAAI,EAAE,YAAY;QAClBC,IAAI,EAAErB,OAAO,CAACsB,OAAO,CAACC,WAAW;QACjCnC,KAAK,EAAEe;MACX,CAAC,EACD;QAAEiB,IAAI,EAAE,UAAU;QAAEC,IAAI,EAAErB,OAAO,CAACsB,OAAO,CAACC,WAAW;QAAEnC,KAAK,EAAEgB;MAAQ,CAAC,EAAE;QACrEgB,IAAI,EAAE,eAAe;QACrBC,IAAI,EAAErB,OAAO,CAACsB,OAAO,CAACC,WAAW;QACjCnC,KAAK,EAAEiB;MACX,CAAC,EACD;QACIe,IAAI,EAAE,eAAe;QACrBC,IAAI,EAAErB,OAAO,CAACsB,OAAO,CAACC,WAAW;QACjCnC,KAAK,EAAEkB;MACX,CAAC,EACD;QACIc,IAAI,EAAE,kBAAkB;QACxBC,IAAI,EAAErB,OAAO,CAACsB,OAAO,CAACC,WAAW;QACjCnC,KAAK,EAAEmB;MACX,CAAC,CACJ;MACD,OAAOP,OAAO,CAACwB,mBAAmB,CAACnC,MAAM,CAACK,YAAY,EAAEuB,OAAO,EAAE,CAACnB,CAAC,EAAEe,WAAW,EAAEE,SAAS,EAAEC,aAAa,CAAC,CAAC;IAChH,CAAC,CAAC;EACN;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}