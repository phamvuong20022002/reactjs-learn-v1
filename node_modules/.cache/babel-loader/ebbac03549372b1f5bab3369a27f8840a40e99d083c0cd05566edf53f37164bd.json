{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.sliceConfig = {\n  kernelName: tfjs_1.Slice,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var x = args.inputs.x;\n    var backend = args.backend;\n    var _a = args.attrs,\n      begin = _a.begin,\n      size = _a.size;\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('Index', 'int32')];\n    // Bind tensor values\n    var _b = tfjs_1.backend_util.slice_util.parseSliceParams(x, begin, size),\n      begin_ = _b[0],\n      size_ = _b[1];\n    var beginTensor = tfjs_1.tensor1d(begin_, 'int32');\n    var sizeTensor = tfjs_1.tensor1d(size_, 'int32');\n    var res = backend.executeSingleOutput(tfjs_1.Slice, opAttrs, [x, beginTensor, sizeTensor]);\n    beginTensor.dispose();\n    sizeTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","sliceConfig","kernelName","Slice","backendName","kernelFunc","args","x","inputs","backend","_a","attrs","begin","size","opAttrs","createTensorsTypeOpAttr","dtype","_b","backend_util","slice_util","parseSliceParams","begin_","size_","beginTensor","tensor1d","sizeTensor","res","executeSingleOutput","dispose"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/kernels/Slice.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.sliceConfig = {\n    kernelName: tfjs_1.Slice,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var x = args.inputs.x;\n        var backend = args.backend;\n        var _a = args.attrs, begin = _a.begin, size = _a.size;\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('Index', 'int32')\n        ];\n        // Bind tensor values\n        var _b = tfjs_1.backend_util.slice_util.parseSliceParams(x, begin, size), begin_ = _b[0], size_ = _b[1];\n        var beginTensor = tfjs_1.tensor1d(begin_, 'int32');\n        var sizeTensor = tfjs_1.tensor1d(size_, 'int32');\n        var res = backend.executeSingleOutput(tfjs_1.Slice, opAttrs, [x, beginTensor, sizeTensor]);\n        beginTensor.dispose();\n        sizeTensor.dispose();\n        return res;\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACjEH,OAAO,CAACK,WAAW,GAAG;EAClBC,UAAU,EAAEJ,MAAM,CAACK,KAAK;EACxBC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,SAAAA,CAAUC,IAAI,EAAE;IACxB,IAAIC,CAAC,GAAGD,IAAI,CAACE,MAAM,CAACD,CAAC;IACrB,IAAIE,OAAO,GAAGH,IAAI,CAACG,OAAO;IAC1B,IAAIC,EAAE,GAAGJ,IAAI,CAACK,KAAK;MAAEC,KAAK,GAAGF,EAAE,CAACE,KAAK;MAAEC,IAAI,GAAGH,EAAE,CAACG,IAAI;IACrD,IAAIC,OAAO,GAAG,CACVd,uBAAuB,CAACe,uBAAuB,CAAC,GAAG,EAAER,CAAC,CAACS,KAAK,CAAC,EAC7DhB,uBAAuB,CAACe,uBAAuB,CAAC,OAAO,EAAE,OAAO,CAAC,CACpE;IACD;IACA,IAAIE,EAAE,GAAGnB,MAAM,CAACoB,YAAY,CAACC,UAAU,CAACC,gBAAgB,CAACb,CAAC,EAAEK,KAAK,EAAEC,IAAI,CAAC;MAAEQ,MAAM,GAAGJ,EAAE,CAAC,CAAC,CAAC;MAAEK,KAAK,GAAGL,EAAE,CAAC,CAAC,CAAC;IACvG,IAAIM,WAAW,GAAGzB,MAAM,CAAC0B,QAAQ,CAACH,MAAM,EAAE,OAAO,CAAC;IAClD,IAAII,UAAU,GAAG3B,MAAM,CAAC0B,QAAQ,CAACF,KAAK,EAAE,OAAO,CAAC;IAChD,IAAII,GAAG,GAAGjB,OAAO,CAACkB,mBAAmB,CAAC7B,MAAM,CAACK,KAAK,EAAEW,OAAO,EAAE,CAACP,CAAC,EAAEgB,WAAW,EAAEE,UAAU,CAAC,CAAC;IAC1FF,WAAW,CAACK,OAAO,CAAC,CAAC;IACrBH,UAAU,CAACG,OAAO,CAAC,CAAC;IACpB,OAAOF,GAAG;EACd;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}