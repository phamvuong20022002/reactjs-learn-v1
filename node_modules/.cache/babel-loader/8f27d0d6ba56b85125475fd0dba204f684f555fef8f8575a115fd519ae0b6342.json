{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"./nodejs_kernel_backend\");\nvar ImageType;\n(function (ImageType) {\n  ImageType[\"JPEG\"] = \"jpeg\";\n  ImageType[\"PNG\"] = \"png\";\n  ImageType[\"GIF\"] = \"gif\";\n  ImageType[\"BMP\"] = \"BMP\";\n})(ImageType = exports.ImageType || (exports.ImageType = {}));\n/**\n * Decode a JPEG-encoded image to a 3D Tensor of dtype `int32`.\n *\n * @param contents The JPEG-encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0. Accepted values are\n *     0: use the number of channels in the JPEG-encoded image.\n *     1: output a grayscale image.\n *     3: output an RGB image.\n * @param ratio An optional int. Defaults to 1. Downscaling ratio. It is used\n *     when image is type Jpeg.\n * @param fancyUpscaling An optional bool. Defaults to True. If true use a\n *     slower but nicer upscaling of the chroma planes. It is used when image is\n *     type Jpeg.\n * @param tryRecoverTruncated An optional bool. Defaults to False. If true try\n *     to recover an image from truncated input. It is used when image is type\n *     Jpeg.\n * @param acceptableFraction An optional float. Defaults to 1. The minimum\n *     required fraction of lines before a truncated input is accepted. It is\n *     used when image is type Jpeg.\n * @param dctMethod An optional string. Defaults to \"\". string specifying a hint\n *     about the algorithm used for decompression. Defaults to \"\" which maps to\n *     a system-specific default. Currently valid values are [\"INTEGER_FAST\",\n *     \"INTEGER_ACCURATE\"]. The hint may be ignored (e.g., the internal jpeg\n *     library changes to a version that does not have that specific option.) It\n *     is used when image is type Jpeg.\n * @returns A 3D Tensor of dtype `int32` with shape [height, width, 1/3].\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodeJpeg(contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod) {\n  if (channels === void 0) {\n    channels = 0;\n  }\n  if (ratio === void 0) {\n    ratio = 1;\n  }\n  if (fancyUpscaling === void 0) {\n    fancyUpscaling = true;\n  }\n  if (tryRecoverTruncated === void 0) {\n    tryRecoverTruncated = false;\n  }\n  if (acceptableFraction === void 0) {\n    acceptableFraction = 1;\n  }\n  if (dctMethod === void 0) {\n    dctMethod = '';\n  }\n  nodejs_kernel_backend_1.ensureTensorflowBackend();\n  return tfjs_1.tidy(function () {\n    return nodejs_kernel_backend_1.nodeBackend().decodeJpeg(contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod).toInt();\n  });\n}\nexports.decodeJpeg = decodeJpeg;\n/**\n * Decode a PNG-encoded image to a 3D Tensor of dtype `int32`.\n *\n * @param contents The PNG-encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0. Accepted values are\n *      0: use the number of channels in the PNG-encoded image.\n *      1: output a grayscale image.\n *      3: output an RGB image.\n *      4: output an RGBA image.\n * @param dtype The data type of the result. Only `int32` is supported at this\n *     time.\n * @returns A 3D Tensor of dtype `int32` with shape [height, width, 1/3/4].\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodePng(contents, channels, dtype) {\n  if (channels === void 0) {\n    channels = 0;\n  }\n  if (dtype === void 0) {\n    dtype = 'int32';\n  }\n  tfjs_1.util.assert(dtype === 'int32', function () {\n    return 'decodeImage could only return Tensor of type `int32` for now.';\n  });\n  nodejs_kernel_backend_1.ensureTensorflowBackend();\n  return tfjs_1.tidy(function () {\n    return nodejs_kernel_backend_1.nodeBackend().decodePng(contents, channels).toInt();\n  });\n}\nexports.decodePng = decodePng;\n/**\n * Decode the first frame of a BMP-encoded image to a 3D Tensor of dtype\n * `int32`.\n *\n * @param contents The BMP-encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0. Accepted values are\n *      0: use the number of channels in the BMP-encoded image.\n *      3: output an RGB image.\n *      4: output an RGBA image.\n * @returns A 3D Tensor of dtype `int32` with shape [height, width, 3/4].\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodeBmp(contents, channels) {\n  if (channels === void 0) {\n    channels = 0;\n  }\n  nodejs_kernel_backend_1.ensureTensorflowBackend();\n  return tfjs_1.tidy(function () {\n    return nodejs_kernel_backend_1.nodeBackend().decodeBmp(contents, channels).toInt();\n  });\n}\nexports.decodeBmp = decodeBmp;\n/**\n * Decode the frame(s) of a GIF-encoded image to a 4D Tensor of dtype `int32`.\n *\n * @param contents The GIF-encoded image in an Uint8Array.\n * @returns A 4D Tensor of dtype `int32` with shape [num_frames, height, width,\n *     3]. RGB channel order.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodeGif(contents) {\n  nodejs_kernel_backend_1.ensureTensorflowBackend();\n  return tfjs_1.tidy(function () {\n    return nodejs_kernel_backend_1.nodeBackend().decodeGif(contents).toInt();\n  });\n}\nexports.decodeGif = decodeGif;\n/**\n * Given the encoded bytes of an image, it returns a 3D or 4D tensor of the\n * decoded image. Supports BMP, GIF, JPEG and PNG formats.\n *\n * @param content The encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0, use the number of channels in\n *     the image. Number of color channels for the decoded image. It is used\n *     when image is type Png, Bmp, or Jpeg.\n * @param dtype The data type of the result. Only `int32` is supported at this\n *     time.\n * @param expandAnimations A boolean which controls the shape of the returned\n *     op's output. If True, the returned op will produce a 3-D tensor for PNG,\n *     JPEG, and BMP files; and a 4-D tensor for all GIFs, whether animated or\n *     not. If, False, the returned op will produce a 3-D tensor for all file\n *     types and will truncate animated GIFs to the first frame.\n * @returns A Tensor with dtype `int32` and a 3- or 4-dimensional shape,\n *     depending on the file type. For gif file the returned Tensor shape is\n *     [num_frames, height, width, 3], and for jpeg/png/bmp the returned Tensor\n *     shape is [height, width, channels]\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodeImage(content, channels, dtype, expandAnimations) {\n  if (channels === void 0) {\n    channels = 0;\n  }\n  if (dtype === void 0) {\n    dtype = 'int32';\n  }\n  if (expandAnimations === void 0) {\n    expandAnimations = true;\n  }\n  tfjs_1.util.assert(dtype === 'int32', function () {\n    return 'decodeImage could only return Tensor of type `int32` for now.';\n  });\n  var imageType = getImageType(content);\n  // The return tensor has dtype uint8, which is not supported in\n  // TensorFlow.js, casting it to int32 which is the default dtype for image\n  // tensor. If the image is BMP, JPEG or PNG type, expanding the tensors\n  // shape so it becomes Tensor4D, which is the default tensor shape for image\n  // ([batch,imageHeight,imageWidth, depth]).\n  switch (imageType) {\n    case ImageType.JPEG:\n      return decodeJpeg(content, channels);\n    case ImageType.PNG:\n      return decodePng(content, channels);\n    case ImageType.GIF:\n      // If not to expand animations, take first frame of the gif and return\n      // as a 3D tensor.\n      return tfjs_1.tidy(function () {\n        var img = decodeGif(content);\n        return expandAnimations ? img : img.slice(0, 1).squeeze([0]);\n      });\n    case ImageType.BMP:\n      return decodeBmp(content, channels);\n    default:\n      return null;\n  }\n}\nexports.decodeImage = decodeImage;\n/**\n * Encodes an image tensor to JPEG.\n *\n * @param image A 3-D uint8 Tensor of shape [height, width, channels].\n * @param format An optional string from: \"\", \"grayscale\", \"rgb\".\n *     Defaults to \"\". Per pixel image format.\n *     - '': Use a default format based on the number of channels in the image.\n *     - grayscale: Output a grayscale JPEG image. The channels dimension of\n *       image must be 1.\n *     - rgb: Output an RGB JPEG image. The channels dimension of image must\n *       be 3.\n * @param quality An optional int. Defaults to 95. Quality of the compression\n *     from 0 to 100 (higher is better and slower).\n * @param progressive An optional bool. Defaults to False. If True, create a\n *     JPEG that loads progressively (coarse to fine).\n * @param optimizeSize An optional bool. Defaults to False. If True, spend\n *     CPU/RAM to reduce size with no quality change.\n * @param chromaDownsampling  An optional bool. Defaults to True.\n *     See http://en.wikipedia.org/wiki/Chroma_subsampling.\n * @param densityUnit An optional string from: \"in\", \"cm\". Defaults to \"in\".\n *     Unit used to specify x_density and y_density: pixels per inch ('in') or\n *     centimeter ('cm').\n * @param xDensity An optional int. Defaults to 300. Horizontal pixels per\n *     density unit.\n * @param yDensity An optional int. Defaults to 300. Vertical pixels per\n *     density unit.\n * @param xmpMetadata An optional string. Defaults to \"\". If not empty, embed\n *     this XMP metadata in the image header.\n * @returns The JPEG encoded data as an Uint8Array.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction encodeJpeg(image, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata) {\n  if (format === void 0) {\n    format = '';\n  }\n  if (quality === void 0) {\n    quality = 95;\n  }\n  if (progressive === void 0) {\n    progressive = false;\n  }\n  if (optimizeSize === void 0) {\n    optimizeSize = false;\n  }\n  if (chromaDownsampling === void 0) {\n    chromaDownsampling = true;\n  }\n  if (densityUnit === void 0) {\n    densityUnit = 'in';\n  }\n  if (xDensity === void 0) {\n    xDensity = 300;\n  }\n  if (yDensity === void 0) {\n    yDensity = 300;\n  }\n  if (xmpMetadata === void 0) {\n    xmpMetadata = '';\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var backendEncodeImage;\n    return __generator(this, function (_a) {\n      nodejs_kernel_backend_1.ensureTensorflowBackend();\n      backendEncodeImage = function (imageData) {\n        return nodejs_kernel_backend_1.nodeBackend().encodeJpeg(imageData, image.shape, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata);\n      };\n      return [2 /*return*/, encodeImage(image, backendEncodeImage)];\n    });\n  });\n}\nexports.encodeJpeg = encodeJpeg;\n/**\n * Encodes an image tensor to PNG.\n *\n * @param image A 3-D uint8 Tensor of shape [height, width, channels].\n * @param compression An optional int. Defaults to 1. Compression level.\n * @returns The PNG encoded data as an Uint8Array.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction encodePng(image, compression) {\n  if (compression === void 0) {\n    compression = 1;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var backendEncodeImage;\n    return __generator(this, function (_a) {\n      nodejs_kernel_backend_1.ensureTensorflowBackend();\n      backendEncodeImage = function (imageData) {\n        return nodejs_kernel_backend_1.nodeBackend().encodePng(imageData, image.shape, compression);\n      };\n      return [2 /*return*/, encodeImage(image, backendEncodeImage)];\n    });\n  });\n}\nexports.encodePng = encodePng;\nfunction encodeImage(image, backendEncodeImage) {\n  return __awaiter(this, void 0, void 0, function () {\n    var encodedDataTensor, _a, _b, encodedPngData;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = backendEncodeImage;\n          _b = Uint8Array.bind;\n          return [4 /*yield*/, image.data()];\n        case 1:\n          encodedDataTensor = _a.apply(void 0, [new (_b.apply(Uint8Array, [void 0, _c.sent()]))()]);\n          // tslint:disable-next-line:no-any\n          return [4 /*yield*/, encodedDataTensor.data()];\n        case 2:\n          encodedPngData =\n          // tslint:disable-next-line:no-any\n          _c.sent()[0];\n          encodedDataTensor.dispose();\n          return [2 /*return*/, encodedPngData];\n      }\n    });\n  });\n}\n/**\n * Helper function to get image type based on starting bytes of the image file.\n */\nfunction getImageType(content) {\n  // Classify the contents of a file based on starting bytes (aka magic number:\n  // https://en.wikipedia.org/wiki/Magic_number_(programming)#Magic_numbers_in_files)\n  // This aligns with TensorFlow Core code:\n  // https://github.com/tensorflow/tensorflow/blob/4213d5c1bd921f8d5b7b2dc4bbf1eea78d0b5258/tensorflow/core/kernels/decode_image_op.cc#L44\n  if (content.length > 3 && content[0] === 255 && content[1] === 216 && content[2] === 255) {\n    // JPEG byte chunk starts with `ff d8 ff`\n    return ImageType.JPEG;\n  } else if (content.length > 4 && content[0] === 71 && content[1] === 73 && content[2] === 70 && content[3] === 56) {\n    // GIF byte chunk starts with `47 49 46 38`\n    return ImageType.GIF;\n  } else if (content.length > 8 && content[0] === 137 && content[1] === 80 && content[2] === 78 && content[3] === 71 && content[4] === 13 && content[5] === 10 && content[6] === 26 && content[7] === 10) {\n    // PNG byte chunk starts with `\\211 P N G \\r \\n \\032 \\n (89 50 4E 47 0D 0A\n    // 1A 0A)`\n    return ImageType.PNG;\n  } else if (content.length > 3 && content[0] === 66 && content[1] === 77) {\n    // BMP byte chunk starts with `42 4d`\n    return ImageType.BMP;\n  } else {\n    throw new Error('Expected image (BMP, JPEG, PNG, or GIF), but got unsupported ' + 'image type');\n  }\n}\nexports.getImageType = getImageType;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","Object","defineProperty","exports","tfjs_1","require","nodejs_kernel_backend_1","ImageType","decodeJpeg","contents","channels","ratio","fancyUpscaling","tryRecoverTruncated","acceptableFraction","dctMethod","ensureTensorflowBackend","tidy","nodeBackend","toInt","decodePng","dtype","util","assert","decodeBmp","decodeGif","decodeImage","content","expandAnimations","imageType","getImageType","JPEG","PNG","GIF","img","slice","squeeze","BMP","encodeJpeg","image","format","quality","progressive","optimizeSize","chromaDownsampling","densityUnit","xDensity","yDensity","xmpMetadata","backendEncodeImage","_a","imageData","shape","encodeImage","encodePng","compression","encodedDataTensor","_b","encodedPngData","_c","Uint8Array","bind","data","dispose","Error"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/image.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"./nodejs_kernel_backend\");\nvar ImageType;\n(function (ImageType) {\n    ImageType[\"JPEG\"] = \"jpeg\";\n    ImageType[\"PNG\"] = \"png\";\n    ImageType[\"GIF\"] = \"gif\";\n    ImageType[\"BMP\"] = \"BMP\";\n})(ImageType = exports.ImageType || (exports.ImageType = {}));\n/**\n * Decode a JPEG-encoded image to a 3D Tensor of dtype `int32`.\n *\n * @param contents The JPEG-encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0. Accepted values are\n *     0: use the number of channels in the JPEG-encoded image.\n *     1: output a grayscale image.\n *     3: output an RGB image.\n * @param ratio An optional int. Defaults to 1. Downscaling ratio. It is used\n *     when image is type Jpeg.\n * @param fancyUpscaling An optional bool. Defaults to True. If true use a\n *     slower but nicer upscaling of the chroma planes. It is used when image is\n *     type Jpeg.\n * @param tryRecoverTruncated An optional bool. Defaults to False. If true try\n *     to recover an image from truncated input. It is used when image is type\n *     Jpeg.\n * @param acceptableFraction An optional float. Defaults to 1. The minimum\n *     required fraction of lines before a truncated input is accepted. It is\n *     used when image is type Jpeg.\n * @param dctMethod An optional string. Defaults to \"\". string specifying a hint\n *     about the algorithm used for decompression. Defaults to \"\" which maps to\n *     a system-specific default. Currently valid values are [\"INTEGER_FAST\",\n *     \"INTEGER_ACCURATE\"]. The hint may be ignored (e.g., the internal jpeg\n *     library changes to a version that does not have that specific option.) It\n *     is used when image is type Jpeg.\n * @returns A 3D Tensor of dtype `int32` with shape [height, width, 1/3].\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodeJpeg(contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod) {\n    if (channels === void 0) { channels = 0; }\n    if (ratio === void 0) { ratio = 1; }\n    if (fancyUpscaling === void 0) { fancyUpscaling = true; }\n    if (tryRecoverTruncated === void 0) { tryRecoverTruncated = false; }\n    if (acceptableFraction === void 0) { acceptableFraction = 1; }\n    if (dctMethod === void 0) { dctMethod = ''; }\n    nodejs_kernel_backend_1.ensureTensorflowBackend();\n    return tfjs_1.tidy(function () {\n        return nodejs_kernel_backend_1.nodeBackend()\n            .decodeJpeg(contents, channels, ratio, fancyUpscaling, tryRecoverTruncated, acceptableFraction, dctMethod)\n            .toInt();\n    });\n}\nexports.decodeJpeg = decodeJpeg;\n/**\n * Decode a PNG-encoded image to a 3D Tensor of dtype `int32`.\n *\n * @param contents The PNG-encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0. Accepted values are\n *      0: use the number of channels in the PNG-encoded image.\n *      1: output a grayscale image.\n *      3: output an RGB image.\n *      4: output an RGBA image.\n * @param dtype The data type of the result. Only `int32` is supported at this\n *     time.\n * @returns A 3D Tensor of dtype `int32` with shape [height, width, 1/3/4].\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodePng(contents, channels, dtype) {\n    if (channels === void 0) { channels = 0; }\n    if (dtype === void 0) { dtype = 'int32'; }\n    tfjs_1.util.assert(dtype === 'int32', function () { return 'decodeImage could only return Tensor of type `int32` for now.'; });\n    nodejs_kernel_backend_1.ensureTensorflowBackend();\n    return tfjs_1.tidy(function () {\n        return nodejs_kernel_backend_1.nodeBackend().decodePng(contents, channels).toInt();\n    });\n}\nexports.decodePng = decodePng;\n/**\n * Decode the first frame of a BMP-encoded image to a 3D Tensor of dtype\n * `int32`.\n *\n * @param contents The BMP-encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0. Accepted values are\n *      0: use the number of channels in the BMP-encoded image.\n *      3: output an RGB image.\n *      4: output an RGBA image.\n * @returns A 3D Tensor of dtype `int32` with shape [height, width, 3/4].\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodeBmp(contents, channels) {\n    if (channels === void 0) { channels = 0; }\n    nodejs_kernel_backend_1.ensureTensorflowBackend();\n    return tfjs_1.tidy(function () {\n        return nodejs_kernel_backend_1.nodeBackend().decodeBmp(contents, channels).toInt();\n    });\n}\nexports.decodeBmp = decodeBmp;\n/**\n * Decode the frame(s) of a GIF-encoded image to a 4D Tensor of dtype `int32`.\n *\n * @param contents The GIF-encoded image in an Uint8Array.\n * @returns A 4D Tensor of dtype `int32` with shape [num_frames, height, width,\n *     3]. RGB channel order.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodeGif(contents) {\n    nodejs_kernel_backend_1.ensureTensorflowBackend();\n    return tfjs_1.tidy(function () {\n        return nodejs_kernel_backend_1.nodeBackend().decodeGif(contents).toInt();\n    });\n}\nexports.decodeGif = decodeGif;\n/**\n * Given the encoded bytes of an image, it returns a 3D or 4D tensor of the\n * decoded image. Supports BMP, GIF, JPEG and PNG formats.\n *\n * @param content The encoded image in an Uint8Array.\n * @param channels An optional int. Defaults to 0, use the number of channels in\n *     the image. Number of color channels for the decoded image. It is used\n *     when image is type Png, Bmp, or Jpeg.\n * @param dtype The data type of the result. Only `int32` is supported at this\n *     time.\n * @param expandAnimations A boolean which controls the shape of the returned\n *     op's output. If True, the returned op will produce a 3-D tensor for PNG,\n *     JPEG, and BMP files; and a 4-D tensor for all GIFs, whether animated or\n *     not. If, False, the returned op will produce a 3-D tensor for all file\n *     types and will truncate animated GIFs to the first frame.\n * @returns A Tensor with dtype `int32` and a 3- or 4-dimensional shape,\n *     depending on the file type. For gif file the returned Tensor shape is\n *     [num_frames, height, width, 3], and for jpeg/png/bmp the returned Tensor\n *     shape is [height, width, channels]\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction decodeImage(content, channels, dtype, expandAnimations) {\n    if (channels === void 0) { channels = 0; }\n    if (dtype === void 0) { dtype = 'int32'; }\n    if (expandAnimations === void 0) { expandAnimations = true; }\n    tfjs_1.util.assert(dtype === 'int32', function () { return 'decodeImage could only return Tensor of type `int32` for now.'; });\n    var imageType = getImageType(content);\n    // The return tensor has dtype uint8, which is not supported in\n    // TensorFlow.js, casting it to int32 which is the default dtype for image\n    // tensor. If the image is BMP, JPEG or PNG type, expanding the tensors\n    // shape so it becomes Tensor4D, which is the default tensor shape for image\n    // ([batch,imageHeight,imageWidth, depth]).\n    switch (imageType) {\n        case ImageType.JPEG:\n            return decodeJpeg(content, channels);\n        case ImageType.PNG:\n            return decodePng(content, channels);\n        case ImageType.GIF:\n            // If not to expand animations, take first frame of the gif and return\n            // as a 3D tensor.\n            return tfjs_1.tidy(function () {\n                var img = decodeGif(content);\n                return expandAnimations ? img : img.slice(0, 1).squeeze([0]);\n            });\n        case ImageType.BMP:\n            return decodeBmp(content, channels);\n        default:\n            return null;\n    }\n}\nexports.decodeImage = decodeImage;\n/**\n * Encodes an image tensor to JPEG.\n *\n * @param image A 3-D uint8 Tensor of shape [height, width, channels].\n * @param format An optional string from: \"\", \"grayscale\", \"rgb\".\n *     Defaults to \"\". Per pixel image format.\n *     - '': Use a default format based on the number of channels in the image.\n *     - grayscale: Output a grayscale JPEG image. The channels dimension of\n *       image must be 1.\n *     - rgb: Output an RGB JPEG image. The channels dimension of image must\n *       be 3.\n * @param quality An optional int. Defaults to 95. Quality of the compression\n *     from 0 to 100 (higher is better and slower).\n * @param progressive An optional bool. Defaults to False. If True, create a\n *     JPEG that loads progressively (coarse to fine).\n * @param optimizeSize An optional bool. Defaults to False. If True, spend\n *     CPU/RAM to reduce size with no quality change.\n * @param chromaDownsampling  An optional bool. Defaults to True.\n *     See http://en.wikipedia.org/wiki/Chroma_subsampling.\n * @param densityUnit An optional string from: \"in\", \"cm\". Defaults to \"in\".\n *     Unit used to specify x_density and y_density: pixels per inch ('in') or\n *     centimeter ('cm').\n * @param xDensity An optional int. Defaults to 300. Horizontal pixels per\n *     density unit.\n * @param yDensity An optional int. Defaults to 300. Vertical pixels per\n *     density unit.\n * @param xmpMetadata An optional string. Defaults to \"\". If not empty, embed\n *     this XMP metadata in the image header.\n * @returns The JPEG encoded data as an Uint8Array.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction encodeJpeg(image, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata) {\n    if (format === void 0) { format = ''; }\n    if (quality === void 0) { quality = 95; }\n    if (progressive === void 0) { progressive = false; }\n    if (optimizeSize === void 0) { optimizeSize = false; }\n    if (chromaDownsampling === void 0) { chromaDownsampling = true; }\n    if (densityUnit === void 0) { densityUnit = 'in'; }\n    if (xDensity === void 0) { xDensity = 300; }\n    if (yDensity === void 0) { yDensity = 300; }\n    if (xmpMetadata === void 0) { xmpMetadata = ''; }\n    return __awaiter(this, void 0, void 0, function () {\n        var backendEncodeImage;\n        return __generator(this, function (_a) {\n            nodejs_kernel_backend_1.ensureTensorflowBackend();\n            backendEncodeImage = function (imageData) {\n                return nodejs_kernel_backend_1.nodeBackend().encodeJpeg(imageData, image.shape, format, quality, progressive, optimizeSize, chromaDownsampling, densityUnit, xDensity, yDensity, xmpMetadata);\n            };\n            return [2 /*return*/, encodeImage(image, backendEncodeImage)];\n        });\n    });\n}\nexports.encodeJpeg = encodeJpeg;\n/**\n * Encodes an image tensor to PNG.\n *\n * @param image A 3-D uint8 Tensor of shape [height, width, channels].\n * @param compression An optional int. Defaults to 1. Compression level.\n * @returns The PNG encoded data as an Uint8Array.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'node'}\n */\nfunction encodePng(image, compression) {\n    if (compression === void 0) { compression = 1; }\n    return __awaiter(this, void 0, void 0, function () {\n        var backendEncodeImage;\n        return __generator(this, function (_a) {\n            nodejs_kernel_backend_1.ensureTensorflowBackend();\n            backendEncodeImage = function (imageData) {\n                return nodejs_kernel_backend_1.nodeBackend().encodePng(imageData, image.shape, compression);\n            };\n            return [2 /*return*/, encodeImage(image, backendEncodeImage)];\n        });\n    });\n}\nexports.encodePng = encodePng;\nfunction encodeImage(image, backendEncodeImage) {\n    return __awaiter(this, void 0, void 0, function () {\n        var encodedDataTensor, _a, _b, encodedPngData;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    _a = backendEncodeImage;\n                    _b = Uint8Array.bind;\n                    return [4 /*yield*/, image.data()];\n                case 1:\n                    encodedDataTensor = _a.apply(void 0, [new (_b.apply(Uint8Array, [void 0, _c.sent()]))()]);\n                    // tslint:disable-next-line:no-any\n                    return [4 /*yield*/, encodedDataTensor.data()];\n                case 2:\n                    encodedPngData = (\n                    // tslint:disable-next-line:no-any\n                    _c.sent())[0];\n                    encodedDataTensor.dispose();\n                    return [2 /*return*/, encodedPngData];\n            }\n        });\n    });\n}\n/**\n * Helper function to get image type based on starting bytes of the image file.\n */\nfunction getImageType(content) {\n    // Classify the contents of a file based on starting bytes (aka magic number:\n    // https://en.wikipedia.org/wiki/Magic_number_(programming)#Magic_numbers_in_files)\n    // This aligns with TensorFlow Core code:\n    // https://github.com/tensorflow/tensorflow/blob/4213d5c1bd921f8d5b7b2dc4bbf1eea78d0b5258/tensorflow/core/kernels/decode_image_op.cc#L44\n    if (content.length > 3 && content[0] === 255 && content[1] === 216 &&\n        content[2] === 255) {\n        // JPEG byte chunk starts with `ff d8 ff`\n        return ImageType.JPEG;\n    }\n    else if (content.length > 4 && content[0] === 71 && content[1] === 73 &&\n        content[2] === 70 && content[3] === 56) {\n        // GIF byte chunk starts with `47 49 46 38`\n        return ImageType.GIF;\n    }\n    else if (content.length > 8 && content[0] === 137 && content[1] === 80 &&\n        content[2] === 78 && content[3] === 71 && content[4] === 13 &&\n        content[5] === 10 && content[6] === 26 && content[7] === 10) {\n        // PNG byte chunk starts with `\\211 P N G \\r \\n \\032 \\n (89 50 4E 47 0D 0A\n        // 1A 0A)`\n        return ImageType.PNG;\n    }\n    else if (content.length > 3 && content[0] === 66 && content[1] === 77) {\n        // BMP byte chunk starts with `42 4d`\n        return ImageType.BMP;\n    }\n    else {\n        throw new Error('Expected image (BMP, JPEG, PNG, or GIF), but got unsupported ' +\n            'image type');\n    }\n}\nexports.getImageType = getImageType;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}