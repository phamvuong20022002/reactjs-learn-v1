{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.argMaxConfig = {\n  kernelName: tfjs_1.ArgMax,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var x = args.inputs.x;\n    var backend = args.backend;\n    var axis = args.attrs.axis;\n    var toDispose = [];\n    var xInput = x;\n    if (x.dtype === 'bool') {\n      xInput = x.toInt();\n      toDispose.push(xInput);\n    }\n    var axisScalar = tfjs_1.scalar(axis, 'int32');\n    toDispose.push(axisScalar);\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', xInput.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tidx', 'int32'), nodejs_kernel_backend_1.createTensorsTypeOpAttr('output_type', 'int32')];\n    var res = backend.executeSingleOutput(tfjs_1.ArgMax, opAttrs, [xInput, axisScalar]);\n    toDispose.forEach(function (t) {\n      return t.dispose();\n    });\n    return res;\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","argMaxConfig","kernelName","ArgMax","backendName","kernelFunc","args","x","inputs","backend","axis","attrs","toDispose","xInput","dtype","toInt","push","axisScalar","scalar","opAttrs","createTensorsTypeOpAttr","res","executeSingleOutput","forEach","t","dispose"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/kernels/ArgMax.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.argMaxConfig = {\n    kernelName: tfjs_1.ArgMax,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var x = args.inputs.x;\n        var backend = args.backend;\n        var axis = args.attrs.axis;\n        var toDispose = [];\n        var xInput = x;\n        if (x.dtype === 'bool') {\n            xInput = x.toInt();\n            toDispose.push(xInput);\n        }\n        var axisScalar = tfjs_1.scalar(axis, 'int32');\n        toDispose.push(axisScalar);\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', xInput.dtype),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tidx', 'int32'),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('output_type', 'int32')\n        ];\n        var res = backend.executeSingleOutput(tfjs_1.ArgMax, opAttrs, [xInput, axisScalar]);\n        toDispose.forEach(function (t) { return t.dispose(); });\n        return res;\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACjEH,OAAO,CAACK,YAAY,GAAG;EACnBC,UAAU,EAAEJ,MAAM,CAACK,MAAM;EACzBC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,SAAAA,CAAUC,IAAI,EAAE;IACxB,IAAIC,CAAC,GAAGD,IAAI,CAACE,MAAM,CAACD,CAAC;IACrB,IAAIE,OAAO,GAAGH,IAAI,CAACG,OAAO;IAC1B,IAAIC,IAAI,GAAGJ,IAAI,CAACK,KAAK,CAACD,IAAI;IAC1B,IAAIE,SAAS,GAAG,EAAE;IAClB,IAAIC,MAAM,GAAGN,CAAC;IACd,IAAIA,CAAC,CAACO,KAAK,KAAK,MAAM,EAAE;MACpBD,MAAM,GAAGN,CAAC,CAACQ,KAAK,CAAC,CAAC;MAClBH,SAAS,CAACI,IAAI,CAACH,MAAM,CAAC;IAC1B;IACA,IAAII,UAAU,GAAGnB,MAAM,CAACoB,MAAM,CAACR,IAAI,EAAE,OAAO,CAAC;IAC7CE,SAAS,CAACI,IAAI,CAACC,UAAU,CAAC;IAC1B,IAAIE,OAAO,GAAG,CACVnB,uBAAuB,CAACoB,uBAAuB,CAAC,GAAG,EAAEP,MAAM,CAACC,KAAK,CAAC,EAClEd,uBAAuB,CAACoB,uBAAuB,CAAC,MAAM,EAAE,OAAO,CAAC,EAChEpB,uBAAuB,CAACoB,uBAAuB,CAAC,aAAa,EAAE,OAAO,CAAC,CAC1E;IACD,IAAIC,GAAG,GAAGZ,OAAO,CAACa,mBAAmB,CAACxB,MAAM,CAACK,MAAM,EAAEgB,OAAO,EAAE,CAACN,MAAM,EAAEI,UAAU,CAAC,CAAC;IACnFL,SAAS,CAACW,OAAO,CAAC,UAAUC,CAAC,EAAE;MAAE,OAAOA,CAAC,CAACC,OAAO,CAAC,CAAC;IAAE,CAAC,CAAC;IACvD,OAAOJ,GAAG;EACd;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}