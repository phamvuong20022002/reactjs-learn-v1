{"ast":null,"code":"// A path exclusive reservation system\n// reserve([list, of, paths], fn)\n// When the fn is first in line for all its paths, it\n// is called with a cb that clears the reservation.\n//\n// Used by async unpack to avoid clobbering paths in use,\n// while still allowing maximal safe parallelization.\n\nconst assert = require('assert');\nconst normalize = require('./normalize-unicode.js');\nconst stripSlashes = require('./strip-trailing-slashes.js');\nconst {\n  join\n} = require('path');\nconst platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform;\nconst isWindows = platform === 'win32';\nmodule.exports = () => {\n  // path => [function or Set]\n  // A Set object means a directory reservation\n  // A fn is a direct reservation on that path\n  const queues = new Map();\n\n  // fn => {paths:[path,...], dirs:[path, ...]}\n  const reservations = new Map();\n\n  // return a set of parent dirs for a given path\n  // '/a/b/c/d' -> ['/', '/a', '/a/b', '/a/b/c', '/a/b/c/d']\n  const getDirs = path => {\n    const dirs = path.split('/').slice(0, -1).reduce((set, path) => {\n      if (set.length) path = join(set[set.length - 1], path);\n      set.push(path || '/');\n      return set;\n    }, []);\n    return dirs;\n  };\n\n  // functions currently running\n  const running = new Set();\n\n  // return the queues for each path the function cares about\n  // fn => {paths, dirs}\n  const getQueues = fn => {\n    const res = reservations.get(fn);\n    /* istanbul ignore if - unpossible */\n    if (!res) throw new Error('function does not have any path reservations');\n    return {\n      paths: res.paths.map(path => queues.get(path)),\n      dirs: [...res.dirs].map(path => queues.get(path))\n    };\n  };\n\n  // check if fn is first in line for all its paths, and is\n  // included in the first set for all its dir queues\n  const check = fn => {\n    const {\n      paths,\n      dirs\n    } = getQueues(fn);\n    return paths.every(q => q[0] === fn) && dirs.every(q => q[0] instanceof Set && q[0].has(fn));\n  };\n\n  // run the function if it's first in line and not already running\n  const run = fn => {\n    if (running.has(fn) || !check(fn)) return false;\n    running.add(fn);\n    fn(() => clear(fn));\n    return true;\n  };\n  const clear = fn => {\n    if (!running.has(fn)) return false;\n    const {\n      paths,\n      dirs\n    } = reservations.get(fn);\n    const next = new Set();\n    paths.forEach(path => {\n      const q = queues.get(path);\n      assert.equal(q[0], fn);\n      if (q.length === 1) queues.delete(path);else {\n        q.shift();\n        if (typeof q[0] === 'function') next.add(q[0]);else q[0].forEach(fn => next.add(fn));\n      }\n    });\n    dirs.forEach(dir => {\n      const q = queues.get(dir);\n      assert(q[0] instanceof Set);\n      if (q[0].size === 1 && q.length === 1) queues.delete(dir);else if (q[0].size === 1) {\n        q.shift();\n\n        // must be a function or else the Set would've been reused\n        next.add(q[0]);\n      } else q[0].delete(fn);\n    });\n    running.delete(fn);\n    next.forEach(fn => run(fn));\n    return true;\n  };\n  const reserve = (paths, fn) => {\n    // collide on matches across case and unicode normalization\n    // On windows, thanks to the magic of 8.3 shortnames, it is fundamentally\n    // impossible to determine whether two paths refer to the same thing on\n    // disk, without asking the kernel for a shortname.\n    // So, we just pretend that every path matches every other path here,\n    // effectively removing all parallelization on windows.\n    paths = isWindows ? ['win32 parallelization disabled'] : paths.map(p => {\n      // don't need normPath, because we skip this entirely for windows\n      return normalize(stripSlashes(join(p))).toLowerCase();\n    });\n    const dirs = new Set(paths.map(path => getDirs(path)).reduce((a, b) => a.concat(b)));\n    reservations.set(fn, {\n      dirs,\n      paths\n    });\n    paths.forEach(path => {\n      const q = queues.get(path);\n      if (!q) queues.set(path, [fn]);else q.push(fn);\n    });\n    dirs.forEach(dir => {\n      const q = queues.get(dir);\n      if (!q) queues.set(dir, [new Set([fn])]);else if (q[q.length - 1] instanceof Set) q[q.length - 1].add(fn);else q.push(new Set([fn]));\n    });\n    return run(fn);\n  };\n  return {\n    check,\n    reserve\n  };\n};","map":{"version":3,"names":["assert","require","normalize","stripSlashes","join","platform","process","env","TESTING_TAR_FAKE_PLATFORM","isWindows","module","exports","queues","Map","reservations","getDirs","path","dirs","split","slice","reduce","set","length","push","running","Set","getQueues","fn","res","get","Error","paths","map","check","every","q","has","run","add","clear","next","forEach","equal","delete","shift","dir","size","reserve","p","toLowerCase","a","b","concat"],"sources":["C:/Users/ACER/node_modules/@mapbox/node-pre-gyp/node_modules/tar/lib/path-reservations.js"],"sourcesContent":["// A path exclusive reservation system\n// reserve([list, of, paths], fn)\n// When the fn is first in line for all its paths, it\n// is called with a cb that clears the reservation.\n//\n// Used by async unpack to avoid clobbering paths in use,\n// while still allowing maximal safe parallelization.\n\nconst assert = require('assert')\nconst normalize = require('./normalize-unicode.js')\nconst stripSlashes = require('./strip-trailing-slashes.js')\nconst { join } = require('path')\n\nconst platform = process.env.TESTING_TAR_FAKE_PLATFORM || process.platform\nconst isWindows = platform === 'win32'\n\nmodule.exports = () => {\n  // path => [function or Set]\n  // A Set object means a directory reservation\n  // A fn is a direct reservation on that path\n  const queues = new Map()\n\n  // fn => {paths:[path,...], dirs:[path, ...]}\n  const reservations = new Map()\n\n  // return a set of parent dirs for a given path\n  // '/a/b/c/d' -> ['/', '/a', '/a/b', '/a/b/c', '/a/b/c/d']\n  const getDirs = path => {\n    const dirs = path.split('/').slice(0, -1).reduce((set, path) => {\n      if (set.length)\n        path = join(set[set.length - 1], path)\n      set.push(path || '/')\n      return set\n    }, [])\n    return dirs\n  }\n\n  // functions currently running\n  const running = new Set()\n\n  // return the queues for each path the function cares about\n  // fn => {paths, dirs}\n  const getQueues = fn => {\n    const res = reservations.get(fn)\n    /* istanbul ignore if - unpossible */\n    if (!res)\n      throw new Error('function does not have any path reservations')\n    return {\n      paths: res.paths.map(path => queues.get(path)),\n      dirs: [...res.dirs].map(path => queues.get(path)),\n    }\n  }\n\n  // check if fn is first in line for all its paths, and is\n  // included in the first set for all its dir queues\n  const check = fn => {\n    const {paths, dirs} = getQueues(fn)\n    return paths.every(q => q[0] === fn) &&\n      dirs.every(q => q[0] instanceof Set && q[0].has(fn))\n  }\n\n  // run the function if it's first in line and not already running\n  const run = fn => {\n    if (running.has(fn) || !check(fn))\n      return false\n    running.add(fn)\n    fn(() => clear(fn))\n    return true\n  }\n\n  const clear = fn => {\n    if (!running.has(fn))\n      return false\n\n    const { paths, dirs } = reservations.get(fn)\n    const next = new Set()\n\n    paths.forEach(path => {\n      const q = queues.get(path)\n      assert.equal(q[0], fn)\n      if (q.length === 1)\n        queues.delete(path)\n      else {\n        q.shift()\n        if (typeof q[0] === 'function')\n          next.add(q[0])\n        else\n          q[0].forEach(fn => next.add(fn))\n      }\n    })\n\n    dirs.forEach(dir => {\n      const q = queues.get(dir)\n      assert(q[0] instanceof Set)\n      if (q[0].size === 1 && q.length === 1)\n        queues.delete(dir)\n      else if (q[0].size === 1) {\n        q.shift()\n\n        // must be a function or else the Set would've been reused\n        next.add(q[0])\n      } else\n        q[0].delete(fn)\n    })\n    running.delete(fn)\n\n    next.forEach(fn => run(fn))\n    return true\n  }\n\n  const reserve = (paths, fn) => {\n    // collide on matches across case and unicode normalization\n    // On windows, thanks to the magic of 8.3 shortnames, it is fundamentally\n    // impossible to determine whether two paths refer to the same thing on\n    // disk, without asking the kernel for a shortname.\n    // So, we just pretend that every path matches every other path here,\n    // effectively removing all parallelization on windows.\n    paths = isWindows ? ['win32 parallelization disabled'] : paths.map(p => {\n      // don't need normPath, because we skip this entirely for windows\n      return normalize(stripSlashes(join(p))).toLowerCase()\n    })\n\n    const dirs = new Set(\n      paths.map(path => getDirs(path)).reduce((a, b) => a.concat(b))\n    )\n    reservations.set(fn, {dirs, paths})\n    paths.forEach(path => {\n      const q = queues.get(path)\n      if (!q)\n        queues.set(path, [fn])\n      else\n        q.push(fn)\n    })\n    dirs.forEach(dir => {\n      const q = queues.get(dir)\n      if (!q)\n        queues.set(dir, [new Set([fn])])\n      else if (q[q.length - 1] instanceof Set)\n        q[q.length - 1].add(fn)\n      else\n        q.push(new Set([fn]))\n    })\n\n    return run(fn)\n  }\n\n  return { check, reserve }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}