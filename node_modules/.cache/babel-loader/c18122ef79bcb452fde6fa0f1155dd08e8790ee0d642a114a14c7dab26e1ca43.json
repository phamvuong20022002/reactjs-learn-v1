{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Convert an ArrayBuffer to a Buffer.\n */\nfunction toBuffer(ab) {\n  var view = new Uint8Array(ab);\n  return Buffer.from(view); // copies data\n}\n\nexports.toBuffer = toBuffer;\n/**\n * Convert a Buffer or an Array of Buffers to an ArrayBuffer.\n *\n * If the input is an Array of Buffers, they will be concatenated in the\n * specified order to form the output ArrayBuffer.\n */\nfunction toArrayBuffer(buf) {\n  if (Array.isArray(buf)) {\n    // An Array of Buffers.\n    var totalLength = 0;\n    for (var _i = 0, buf_1 = buf; _i < buf_1.length; _i++) {\n      var buffer = buf_1[_i];\n      totalLength += buffer.length;\n    }\n    var ab = new ArrayBuffer(totalLength);\n    var view = new Uint8Array(ab);\n    var pos = 0;\n    for (var _a = 0, buf_2 = buf; _a < buf_2.length; _a++) {\n      var buffer = buf_2[_a];\n      pos += buffer.copy(view, pos);\n    }\n    return ab;\n  } else {\n    // A single Buffer. Return a copy of the underlying ArrayBuffer slice.\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n}\nexports.toArrayBuffer = toArrayBuffer;\n// TODO(cais): Use explicit tf.io.ModelArtifactsInfo return type below once it\n// is available.\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nfunction getModelArtifactsInfoForJSON(modelArtifacts) {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : Buffer.byteLength(JSON.stringify(modelArtifacts.modelTopology), 'utf8'),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : Buffer.byteLength(JSON.stringify(modelArtifacts.weightSpecs), 'utf8'),\n    weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength\n  };\n}\nexports.getModelArtifactsInfoForJSON = getModelArtifactsInfoForJSON;","map":{"version":3,"names":["Object","defineProperty","exports","value","toBuffer","ab","view","Uint8Array","Buffer","from","toArrayBuffer","buf","Array","isArray","totalLength","_i","buf_1","length","buffer","ArrayBuffer","pos","_a","buf_2","copy","slice","byteOffset","byteLength","getModelArtifactsInfoForJSON","modelArtifacts","modelTopology","Error","dateSaved","Date","modelTopologyType","modelTopologyBytes","JSON","stringify","weightSpecsBytes","weightSpecs","weightDataBytes","weightData"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/io/io_utils.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Convert an ArrayBuffer to a Buffer.\n */\nfunction toBuffer(ab) {\n    var view = new Uint8Array(ab);\n    return Buffer.from(view); // copies data\n}\nexports.toBuffer = toBuffer;\n/**\n * Convert a Buffer or an Array of Buffers to an ArrayBuffer.\n *\n * If the input is an Array of Buffers, they will be concatenated in the\n * specified order to form the output ArrayBuffer.\n */\nfunction toArrayBuffer(buf) {\n    if (Array.isArray(buf)) {\n        // An Array of Buffers.\n        var totalLength = 0;\n        for (var _i = 0, buf_1 = buf; _i < buf_1.length; _i++) {\n            var buffer = buf_1[_i];\n            totalLength += buffer.length;\n        }\n        var ab = new ArrayBuffer(totalLength);\n        var view = new Uint8Array(ab);\n        var pos = 0;\n        for (var _a = 0, buf_2 = buf; _a < buf_2.length; _a++) {\n            var buffer = buf_2[_a];\n            pos += buffer.copy(view, pos);\n        }\n        return ab;\n    }\n    else {\n        // A single Buffer. Return a copy of the underlying ArrayBuffer slice.\n        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n    }\n}\nexports.toArrayBuffer = toArrayBuffer;\n// TODO(cais): Use explicit tf.io.ModelArtifactsInfo return type below once it\n// is available.\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nfunction getModelArtifactsInfoForJSON(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n        throw new Error('Expected JSON model topology, received ArrayBuffer.');\n    }\n    return {\n        dateSaved: new Date(),\n        modelTopologyType: 'JSON',\n        modelTopologyBytes: modelArtifacts.modelTopology == null ?\n            0 :\n            Buffer.byteLength(JSON.stringify(modelArtifacts.modelTopology), 'utf8'),\n        weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n            0 :\n            Buffer.byteLength(JSON.stringify(modelArtifacts.weightSpecs), 'utf8'),\n        weightDataBytes: modelArtifacts.weightData == null ?\n            0 :\n            modelArtifacts.weightData.byteLength,\n    };\n}\nexports.getModelArtifactsInfoForJSON = getModelArtifactsInfoForJSON;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D;AACA;AACA;AACA,SAASC,QAAQA,CAACC,EAAE,EAAE;EAClB,IAAIC,IAAI,GAAG,IAAIC,UAAU,CAACF,EAAE,CAAC;EAC7B,OAAOG,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAAC,CAAC;AAC9B;;AACAJ,OAAO,CAACE,QAAQ,GAAGA,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,aAAaA,CAACC,GAAG,EAAE;EACxB,IAAIC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAE;IACpB;IACA,IAAIG,WAAW,GAAG,CAAC;IACnB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,KAAK,GAAGL,GAAG,EAAEI,EAAE,GAAGC,KAAK,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;MACnD,IAAIG,MAAM,GAAGF,KAAK,CAACD,EAAE,CAAC;MACtBD,WAAW,IAAII,MAAM,CAACD,MAAM;IAChC;IACA,IAAIZ,EAAE,GAAG,IAAIc,WAAW,CAACL,WAAW,CAAC;IACrC,IAAIR,IAAI,GAAG,IAAIC,UAAU,CAACF,EAAE,CAAC;IAC7B,IAAIe,GAAG,GAAG,CAAC;IACX,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,KAAK,GAAGX,GAAG,EAAEU,EAAE,GAAGC,KAAK,CAACL,MAAM,EAAEI,EAAE,EAAE,EAAE;MACnD,IAAIH,MAAM,GAAGI,KAAK,CAACD,EAAE,CAAC;MACtBD,GAAG,IAAIF,MAAM,CAACK,IAAI,CAACjB,IAAI,EAAEc,GAAG,CAAC;IACjC;IACA,OAAOf,EAAE;EACb,CAAC,MACI;IACD;IACA,OAAOM,GAAG,CAACO,MAAM,CAACM,KAAK,CAACb,GAAG,CAACc,UAAU,EAAEd,GAAG,CAACc,UAAU,GAAGd,GAAG,CAACe,UAAU,CAAC;EAC5E;AACJ;AACAxB,OAAO,CAACQ,aAAa,GAAGA,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiB,4BAA4BA,CAACC,cAAc,EAAE;EAClD,IAAIA,cAAc,CAACC,aAAa,YAAYV,WAAW,EAAE;IACrD,MAAM,IAAIW,KAAK,CAAC,qDAAqD,CAAC;EAC1E;EACA,OAAO;IACHC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;IACrBC,iBAAiB,EAAE,MAAM;IACzBC,kBAAkB,EAAEN,cAAc,CAACC,aAAa,IAAI,IAAI,GACpD,CAAC,GACDrB,MAAM,CAACkB,UAAU,CAACS,IAAI,CAACC,SAAS,CAACR,cAAc,CAACC,aAAa,CAAC,EAAE,MAAM,CAAC;IAC3EQ,gBAAgB,EAAET,cAAc,CAACU,WAAW,IAAI,IAAI,GAChD,CAAC,GACD9B,MAAM,CAACkB,UAAU,CAACS,IAAI,CAACC,SAAS,CAACR,cAAc,CAACU,WAAW,CAAC,EAAE,MAAM,CAAC;IACzEC,eAAe,EAAEX,cAAc,CAACY,UAAU,IAAI,IAAI,GAC9C,CAAC,GACDZ,cAAc,CAACY,UAAU,CAACd;EAClC,CAAC;AACL;AACAxB,OAAO,CAACyB,4BAA4B,GAAGA,4BAA4B"},"metadata":{},"sourceType":"script","externalDependencies":[]}