{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.spaceToBatchNDConfig = {\n  kernelName: tfjs_1.SpaceToBatchND,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var x = args.inputs.x;\n    var backend = args.backend;\n    var _a = args.attrs,\n      blockShape = _a.blockShape,\n      paddings = _a.paddings;\n    var blockShapeTensor = tfjs_1.tensor1d(blockShape, 'int32');\n    var paddingsTensor = tfjs_1.tensor2d(paddings, [paddings.length, paddings[0].length], 'int32');\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tblock_shape', 'int32'), nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tpaddings', paddingsTensor.dtype)];\n    var res = backend.executeSingleOutput(tfjs_1.SpaceToBatchND, opAttrs, [x, blockShapeTensor, paddingsTensor]);\n    blockShapeTensor.dispose();\n    paddingsTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","spaceToBatchNDConfig","kernelName","SpaceToBatchND","backendName","kernelFunc","args","x","inputs","backend","_a","attrs","blockShape","paddings","blockShapeTensor","tensor1d","paddingsTensor","tensor2d","length","opAttrs","createTensorsTypeOpAttr","dtype","res","executeSingleOutput","dispose"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/kernels/SpaceToBatchND.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.spaceToBatchNDConfig = {\n    kernelName: tfjs_1.SpaceToBatchND,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var x = args.inputs.x;\n        var backend = args.backend;\n        var _a = args.attrs, blockShape = _a.blockShape, paddings = _a.paddings;\n        var blockShapeTensor = tfjs_1.tensor1d(blockShape, 'int32');\n        var paddingsTensor = tfjs_1.tensor2d(paddings, [paddings.length, paddings[0].length], 'int32');\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', x.dtype),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tblock_shape', 'int32'),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tpaddings', paddingsTensor.dtype)\n        ];\n        var res = backend.executeSingleOutput(tfjs_1.SpaceToBatchND, opAttrs, [x, blockShapeTensor, paddingsTensor]);\n        blockShapeTensor.dispose();\n        paddingsTensor.dispose();\n        return res;\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACjEH,OAAO,CAACK,oBAAoB,GAAG;EAC3BC,UAAU,EAAEJ,MAAM,CAACK,cAAc;EACjCC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,SAAAA,CAAUC,IAAI,EAAE;IACxB,IAAIC,CAAC,GAAGD,IAAI,CAACE,MAAM,CAACD,CAAC;IACrB,IAAIE,OAAO,GAAGH,IAAI,CAACG,OAAO;IAC1B,IAAIC,EAAE,GAAGJ,IAAI,CAACK,KAAK;MAAEC,UAAU,GAAGF,EAAE,CAACE,UAAU;MAAEC,QAAQ,GAAGH,EAAE,CAACG,QAAQ;IACvE,IAAIC,gBAAgB,GAAGhB,MAAM,CAACiB,QAAQ,CAACH,UAAU,EAAE,OAAO,CAAC;IAC3D,IAAII,cAAc,GAAGlB,MAAM,CAACmB,QAAQ,CAACJ,QAAQ,EAAE,CAACA,QAAQ,CAACK,MAAM,EAAEL,QAAQ,CAAC,CAAC,CAAC,CAACK,MAAM,CAAC,EAAE,OAAO,CAAC;IAC9F,IAAIC,OAAO,GAAG,CACVnB,uBAAuB,CAACoB,uBAAuB,CAAC,GAAG,EAAEb,CAAC,CAACc,KAAK,CAAC,EAC7DrB,uBAAuB,CAACoB,uBAAuB,CAAC,cAAc,EAAE,OAAO,CAAC,EACxEpB,uBAAuB,CAACoB,uBAAuB,CAAC,WAAW,EAAEJ,cAAc,CAACK,KAAK,CAAC,CACrF;IACD,IAAIC,GAAG,GAAGb,OAAO,CAACc,mBAAmB,CAACzB,MAAM,CAACK,cAAc,EAAEgB,OAAO,EAAE,CAACZ,CAAC,EAAEO,gBAAgB,EAAEE,cAAc,CAAC,CAAC;IAC5GF,gBAAgB,CAACU,OAAO,CAAC,CAAC;IAC1BR,cAAc,CAACQ,OAAO,CAAC,CAAC;IACxB,OAAOF,GAAG;EACd;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}