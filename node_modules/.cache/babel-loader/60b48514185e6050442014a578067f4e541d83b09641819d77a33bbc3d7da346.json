{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.sparseToDenseConfig = {\n  kernelName: tfjs_1.SparseToDense,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n      sparseIndices = _a.sparseIndices,\n      sparseValues = _a.sparseValues,\n      defaultValue = _a.defaultValue;\n    var backend = args.backend;\n    var outputShape = args.attrs.outputShape;\n    var opAttrs = [{\n      name: 'validate_indices',\n      type: backend.binding.TF_ATTR_BOOL,\n      value: true\n    }, nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', sparseValues.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tindices', sparseIndices.dtype)];\n    var outputShapeTensor = tfjs_1.tensor1d(outputShape, 'int32');\n    var res = backend.executeSingleOutput(tfjs_1.SparseToDense, opAttrs, [sparseIndices, outputShapeTensor, sparseValues, defaultValue]);\n    outputShapeTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","sparseToDenseConfig","kernelName","SparseToDense","backendName","kernelFunc","args","_a","inputs","sparseIndices","sparseValues","defaultValue","backend","outputShape","attrs","opAttrs","name","type","binding","TF_ATTR_BOOL","createTensorsTypeOpAttr","dtype","outputShapeTensor","tensor1d","res","executeSingleOutput","dispose"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/kernels/SparseToDense.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.sparseToDenseConfig = {\n    kernelName: tfjs_1.SparseToDense,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, sparseIndices = _a.sparseIndices, sparseValues = _a.sparseValues, defaultValue = _a.defaultValue;\n        var backend = args.backend;\n        var outputShape = args.attrs.outputShape;\n        var opAttrs = [\n            {\n                name: 'validate_indices',\n                type: backend.binding.TF_ATTR_BOOL,\n                value: true\n            },\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', sparseValues.dtype),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('Tindices', sparseIndices.dtype)\n        ];\n        var outputShapeTensor = tfjs_1.tensor1d(outputShape, 'int32');\n        var res = backend.executeSingleOutput(tfjs_1.SparseToDense, opAttrs, [sparseIndices, outputShapeTensor, sparseValues, defaultValue]);\n        outputShapeTensor.dispose();\n        return res;\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACjEH,OAAO,CAACK,mBAAmB,GAAG;EAC1BC,UAAU,EAAEJ,MAAM,CAACK,aAAa;EAChCC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,SAAAA,CAAUC,IAAI,EAAE;IACxB,IAAIC,EAAE,GAAGD,IAAI,CAACE,MAAM;MAAEC,aAAa,GAAGF,EAAE,CAACE,aAAa;MAAEC,YAAY,GAAGH,EAAE,CAACG,YAAY;MAAEC,YAAY,GAAGJ,EAAE,CAACI,YAAY;IACtH,IAAIC,OAAO,GAAGN,IAAI,CAACM,OAAO;IAC1B,IAAIC,WAAW,GAAGP,IAAI,CAACQ,KAAK,CAACD,WAAW;IACxC,IAAIE,OAAO,GAAG,CACV;MACIC,IAAI,EAAE,kBAAkB;MACxBC,IAAI,EAAEL,OAAO,CAACM,OAAO,CAACC,YAAY;MAClCtB,KAAK,EAAE;IACX,CAAC,EACDG,uBAAuB,CAACoB,uBAAuB,CAAC,GAAG,EAAEV,YAAY,CAACW,KAAK,CAAC,EACxErB,uBAAuB,CAACoB,uBAAuB,CAAC,UAAU,EAAEX,aAAa,CAACY,KAAK,CAAC,CACnF;IACD,IAAIC,iBAAiB,GAAGxB,MAAM,CAACyB,QAAQ,CAACV,WAAW,EAAE,OAAO,CAAC;IAC7D,IAAIW,GAAG,GAAGZ,OAAO,CAACa,mBAAmB,CAAC3B,MAAM,CAACK,aAAa,EAAEY,OAAO,EAAE,CAACN,aAAa,EAAEa,iBAAiB,EAAEZ,YAAY,EAAEC,YAAY,CAAC,CAAC;IACpIW,iBAAiB,CAACI,OAAO,CAAC,CAAC;IAC3B,OAAOF,GAAG;EACd;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}