{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.cropAndResizeConfig = {\n  kernelName: tfjs_1.CropAndResize,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var _a = args.inputs,\n      image = _a.image,\n      boxes = _a.boxes,\n      boxInd = _a.boxInd;\n    var backend = args.backend;\n    var _b = args.attrs,\n      cropSize = _b.cropSize,\n      method = _b.method,\n      extrapolationValue = _b.extrapolationValue;\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', image.dtype), {\n      name: 'method',\n      type: backend.binding.TF_ATTR_STRING,\n      value: method\n    }, {\n      name: 'extrapolation_value',\n      type: backend.binding.TF_ATTR_FLOAT,\n      value: extrapolationValue\n    }];\n    var cropSizeTensor = tfjs_1.tensor1d(cropSize, 'int32');\n    var res = backend.executeSingleOutput(tfjs_1.CropAndResize, opAttrs, [image, boxes, boxInd, cropSizeTensor]);\n    cropSizeTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","cropAndResizeConfig","kernelName","CropAndResize","backendName","kernelFunc","args","_a","inputs","image","boxes","boxInd","backend","_b","attrs","cropSize","method","extrapolationValue","opAttrs","createTensorsTypeOpAttr","dtype","name","type","binding","TF_ATTR_STRING","TF_ATTR_FLOAT","cropSizeTensor","tensor1d","res","executeSingleOutput","dispose"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/kernels/CropAndResize.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.cropAndResizeConfig = {\n    kernelName: tfjs_1.CropAndResize,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var _a = args.inputs, image = _a.image, boxes = _a.boxes, boxInd = _a.boxInd;\n        var backend = args.backend;\n        var _b = args.attrs, cropSize = _b.cropSize, method = _b.method, extrapolationValue = _b.extrapolationValue;\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', image.dtype),\n            { name: 'method', type: backend.binding.TF_ATTR_STRING, value: method }, {\n                name: 'extrapolation_value',\n                type: backend.binding.TF_ATTR_FLOAT,\n                value: extrapolationValue\n            }\n        ];\n        var cropSizeTensor = tfjs_1.tensor1d(cropSize, 'int32');\n        var res = backend.executeSingleOutput(tfjs_1.CropAndResize, opAttrs, [image, boxes, boxInd, cropSizeTensor]);\n        cropSizeTensor.dispose();\n        return res;\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACjEH,OAAO,CAACK,mBAAmB,GAAG;EAC1BC,UAAU,EAAEJ,MAAM,CAACK,aAAa;EAChCC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,SAAAA,CAAUC,IAAI,EAAE;IACxB,IAAIC,EAAE,GAAGD,IAAI,CAACE,MAAM;MAAEC,KAAK,GAAGF,EAAE,CAACE,KAAK;MAAEC,KAAK,GAAGH,EAAE,CAACG,KAAK;MAAEC,MAAM,GAAGJ,EAAE,CAACI,MAAM;IAC5E,IAAIC,OAAO,GAAGN,IAAI,CAACM,OAAO;IAC1B,IAAIC,EAAE,GAAGP,IAAI,CAACQ,KAAK;MAAEC,QAAQ,GAAGF,EAAE,CAACE,QAAQ;MAAEC,MAAM,GAAGH,EAAE,CAACG,MAAM;MAAEC,kBAAkB,GAAGJ,EAAE,CAACI,kBAAkB;IAC3G,IAAIC,OAAO,GAAG,CACVlB,uBAAuB,CAACmB,uBAAuB,CAAC,GAAG,EAAEV,KAAK,CAACW,KAAK,CAAC,EACjE;MAAEC,IAAI,EAAE,QAAQ;MAAEC,IAAI,EAAEV,OAAO,CAACW,OAAO,CAACC,cAAc;MAAE3B,KAAK,EAAEmB;IAAO,CAAC,EAAE;MACrEK,IAAI,EAAE,qBAAqB;MAC3BC,IAAI,EAAEV,OAAO,CAACW,OAAO,CAACE,aAAa;MACnC5B,KAAK,EAAEoB;IACX,CAAC,CACJ;IACD,IAAIS,cAAc,GAAG5B,MAAM,CAAC6B,QAAQ,CAACZ,QAAQ,EAAE,OAAO,CAAC;IACvD,IAAIa,GAAG,GAAGhB,OAAO,CAACiB,mBAAmB,CAAC/B,MAAM,CAACK,aAAa,EAAEe,OAAO,EAAE,CAACT,KAAK,EAAEC,KAAK,EAAEC,MAAM,EAAEe,cAAc,CAAC,CAAC;IAC5GA,cAAc,CAACI,OAAO,CAAC,CAAC;IACxB,OAAOF,GAAG;EACd;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}