{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.multinomialConfig = {\n  kernelName: tfjs_1.Multinomial,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var logits = args.inputs.logits;\n    var backend = args.backend;\n    var _a = args.attrs,\n      numSamples = _a.numSamples,\n      seed = _a.seed,\n      normalized = _a.normalized;\n    if (normalized) {\n      throw new Error('TF Node backend does not support normalized logits ' + 'passed to multinomial');\n    }\n    var opAttrs = [nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', logits.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('output_dtype', 'int32'), {\n      name: 'seed',\n      type: backend.binding.TF_ATTR_INT,\n      value: seed\n    }, {\n      name: 'seed2',\n      type: backend.binding.TF_ATTR_INT,\n      value: seed * seed\n    }];\n    var numSamplesTensor = tfjs_1.scalar(numSamples, 'int32');\n    var res = backend.executeSingleOutput(tfjs_1.Multinomial, opAttrs, [logits, numSamplesTensor]);\n    numSamplesTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","multinomialConfig","kernelName","Multinomial","backendName","kernelFunc","args","logits","inputs","backend","_a","attrs","numSamples","seed","normalized","Error","opAttrs","createTensorsTypeOpAttr","dtype","name","type","binding","TF_ATTR_INT","numSamplesTensor","scalar","res","executeSingleOutput","dispose"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/kernels/Multinomial.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.multinomialConfig = {\n    kernelName: tfjs_1.Multinomial,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var logits = args.inputs.logits;\n        var backend = args.backend;\n        var _a = args.attrs, numSamples = _a.numSamples, seed = _a.seed, normalized = _a.normalized;\n        if (normalized) {\n            throw new Error('TF Node backend does not support normalized logits ' +\n                'passed to multinomial');\n        }\n        var opAttrs = [\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', logits.dtype),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('output_dtype', 'int32'),\n            { name: 'seed', type: backend.binding.TF_ATTR_INT, value: seed },\n            { name: 'seed2', type: backend.binding.TF_ATTR_INT, value: seed * seed },\n        ];\n        var numSamplesTensor = tfjs_1.scalar(numSamples, 'int32');\n        var res = backend.executeSingleOutput(tfjs_1.Multinomial, opAttrs, [logits, numSamplesTensor]);\n        numSamplesTensor.dispose();\n        return res;\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACjEH,OAAO,CAACK,iBAAiB,GAAG;EACxBC,UAAU,EAAEJ,MAAM,CAACK,WAAW;EAC9BC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,SAAAA,CAAUC,IAAI,EAAE;IACxB,IAAIC,MAAM,GAAGD,IAAI,CAACE,MAAM,CAACD,MAAM;IAC/B,IAAIE,OAAO,GAAGH,IAAI,CAACG,OAAO;IAC1B,IAAIC,EAAE,GAAGJ,IAAI,CAACK,KAAK;MAAEC,UAAU,GAAGF,EAAE,CAACE,UAAU;MAAEC,IAAI,GAAGH,EAAE,CAACG,IAAI;MAAEC,UAAU,GAAGJ,EAAE,CAACI,UAAU;IAC3F,IAAIA,UAAU,EAAE;MACZ,MAAM,IAAIC,KAAK,CAAC,qDAAqD,GACjE,uBAAuB,CAAC;IAChC;IACA,IAAIC,OAAO,GAAG,CACVhB,uBAAuB,CAACiB,uBAAuB,CAAC,GAAG,EAAEV,MAAM,CAACW,KAAK,CAAC,EAClElB,uBAAuB,CAACiB,uBAAuB,CAAC,cAAc,EAAE,OAAO,CAAC,EACxE;MAAEE,IAAI,EAAE,MAAM;MAAEC,IAAI,EAAEX,OAAO,CAACY,OAAO,CAACC,WAAW;MAAEzB,KAAK,EAAEgB;IAAK,CAAC,EAChE;MAAEM,IAAI,EAAE,OAAO;MAAEC,IAAI,EAAEX,OAAO,CAACY,OAAO,CAACC,WAAW;MAAEzB,KAAK,EAAEgB,IAAI,GAAGA;IAAK,CAAC,CAC3E;IACD,IAAIU,gBAAgB,GAAGzB,MAAM,CAAC0B,MAAM,CAACZ,UAAU,EAAE,OAAO,CAAC;IACzD,IAAIa,GAAG,GAAGhB,OAAO,CAACiB,mBAAmB,CAAC5B,MAAM,CAACK,WAAW,EAAEa,OAAO,EAAE,CAACT,MAAM,EAAEgB,gBAAgB,CAAC,CAAC;IAC9FA,gBAAgB,CAACI,OAAO,CAAC,CAAC;IAC1B,OAAOF,GAAG;EACd;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}