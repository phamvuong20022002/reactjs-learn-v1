{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.oneHotConfig = {\n  kernelName: tfjs_1.OneHot,\n  backendName: 'tensorflow',\n  kernelFunc: function (args) {\n    var indices = args.inputs.indices;\n    var backend = args.backend;\n    var _a = args.attrs,\n      depth = _a.depth,\n      onValue = _a.onValue,\n      offValue = _a.offValue;\n    var depthTensor = tfjs_1.scalar(depth, 'int32');\n    var onValueTensor = tfjs_1.scalar(onValue, 'int32');\n    var offValueTensor = tfjs_1.scalar(offValue, 'int32');\n    var opAttrs = [{\n      name: 'axis',\n      type: backend.binding.TF_ATTR_INT,\n      value: -1\n    }, nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', indices.dtype), nodejs_kernel_backend_1.createTensorsTypeOpAttr('TI', indices.dtype)];\n    var res = backend.executeSingleOutput(tfjs_1.OneHot, opAttrs, [indices, depthTensor, onValueTensor, offValueTensor]);\n    depthTensor.dispose();\n    onValueTensor.dispose();\n    offValueTensor.dispose();\n    return res;\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","tfjs_1","require","nodejs_kernel_backend_1","oneHotConfig","kernelName","OneHot","backendName","kernelFunc","args","indices","inputs","backend","_a","attrs","depth","onValue","offValue","depthTensor","scalar","onValueTensor","offValueTensor","opAttrs","name","type","binding","TF_ATTR_INT","createTensorsTypeOpAttr","dtype","res","executeSingleOutput","dispose"],"sources":["C:/Users/ACER/node_modules/@tensorflow/tfjs-node/dist/kernels/OneHot.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar nodejs_kernel_backend_1 = require(\"../nodejs_kernel_backend\");\nexports.oneHotConfig = {\n    kernelName: tfjs_1.OneHot,\n    backendName: 'tensorflow',\n    kernelFunc: function (args) {\n        var indices = args.inputs.indices;\n        var backend = args.backend;\n        var _a = args.attrs, depth = _a.depth, onValue = _a.onValue, offValue = _a.offValue;\n        var depthTensor = tfjs_1.scalar(depth, 'int32');\n        var onValueTensor = tfjs_1.scalar(onValue, 'int32');\n        var offValueTensor = tfjs_1.scalar(offValue, 'int32');\n        var opAttrs = [\n            { name: 'axis', type: backend.binding.TF_ATTR_INT, value: -1 },\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('T', indices.dtype),\n            nodejs_kernel_backend_1.createTensorsTypeOpAttr('TI', indices.dtype)\n        ];\n        var res = backend.executeSingleOutput(tfjs_1.OneHot, opAttrs, [indices, depthTensor, onValueTensor, offValueTensor]);\n        depthTensor.dispose();\n        onValueTensor.dispose();\n        offValueTensor.dispose();\n        return res;\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACxC,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACjEH,OAAO,CAACK,YAAY,GAAG;EACnBC,UAAU,EAAEJ,MAAM,CAACK,MAAM;EACzBC,WAAW,EAAE,YAAY;EACzBC,UAAU,EAAE,SAAAA,CAAUC,IAAI,EAAE;IACxB,IAAIC,OAAO,GAAGD,IAAI,CAACE,MAAM,CAACD,OAAO;IACjC,IAAIE,OAAO,GAAGH,IAAI,CAACG,OAAO;IAC1B,IAAIC,EAAE,GAAGJ,IAAI,CAACK,KAAK;MAAEC,KAAK,GAAGF,EAAE,CAACE,KAAK;MAAEC,OAAO,GAAGH,EAAE,CAACG,OAAO;MAAEC,QAAQ,GAAGJ,EAAE,CAACI,QAAQ;IACnF,IAAIC,WAAW,GAAGjB,MAAM,CAACkB,MAAM,CAACJ,KAAK,EAAE,OAAO,CAAC;IAC/C,IAAIK,aAAa,GAAGnB,MAAM,CAACkB,MAAM,CAACH,OAAO,EAAE,OAAO,CAAC;IACnD,IAAIK,cAAc,GAAGpB,MAAM,CAACkB,MAAM,CAACF,QAAQ,EAAE,OAAO,CAAC;IACrD,IAAIK,OAAO,GAAG,CACV;MAAEC,IAAI,EAAE,MAAM;MAAEC,IAAI,EAAEZ,OAAO,CAACa,OAAO,CAACC,WAAW;MAAE1B,KAAK,EAAE,CAAC;IAAE,CAAC,EAC9DG,uBAAuB,CAACwB,uBAAuB,CAAC,GAAG,EAAEjB,OAAO,CAACkB,KAAK,CAAC,EACnEzB,uBAAuB,CAACwB,uBAAuB,CAAC,IAAI,EAAEjB,OAAO,CAACkB,KAAK,CAAC,CACvE;IACD,IAAIC,GAAG,GAAGjB,OAAO,CAACkB,mBAAmB,CAAC7B,MAAM,CAACK,MAAM,EAAEgB,OAAO,EAAE,CAACZ,OAAO,EAAEQ,WAAW,EAAEE,aAAa,EAAEC,cAAc,CAAC,CAAC;IACpHH,WAAW,CAACa,OAAO,CAAC,CAAC;IACrBX,aAAa,CAACW,OAAO,CAAC,CAAC;IACvBV,cAAc,CAACU,OAAO,CAAC,CAAC;IACxB,OAAOF,GAAG;EACd;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}